[{"path":"index.html","id":"简介","chapter":"简介","heading":"简介","text":"我，李详，昵称小蓝哥。现于云南农业大学攻读植物病理学博士学位。个人博客：小蓝哥的知识荒原运营公众号：","code":""},{"path":"r-base.html","id":"r-base","chapter":"第 1 章 语言基础","heading":"第 1 章 语言基础","text":"","code":""},{"path":"r-base.html","id":"r的安装","chapter":"第 1 章 语言基础","heading":"1.1 R的安装","text":"各系统下R的安装，点击访问。安装最新版R安装R包报错：ERROR: failed lock directory ‘/usr/local/lib/R/library’ modifying的解决方案：","code":"sudo sed -i \"s/# deb-src/deb-src/g\" /etc/apt/sources.list\nsudo apt-get update\nsudo apt-get build-dep r-base-dev\n\ncd ~/Downloads\nwget -c https://cran.r-project.org/src/base/R-4/R-4.1.0.tar.gz\ntar -xf R-4.1.0.tar.gz\ncd R-4.1.0\n./configure\nmake -j9\nsudo make installR CMD INSTALL --no-lock <pkg>\ninstall.packages(\"Rcpp\", dependencies = TRUE, INSTALL_opts = '--no-lock')"},{"path":"r-base.html","id":"包的安装更新","chapter":"第 1 章 语言基础","heading":"1.2 包的安装更新","text":"更新所有R包","code":"#安装包\ninstall.packages(\"rvcheck\")\n#加载包\nlibrary(rvcheck)\n#检查R是否有更新\nrvcheck::check_r()\n# 更新所有R包\nrvcheck::update_all(check_R = FALSE,which = c(\"CRAN\",\"BioC\",\"github\")"},{"path":"r-stat.html","id":"r-stat","chapter":"第 2 章 统计分析","heading":"第 2 章 统计分析","text":"","code":""},{"path":"r-vis.html","id":"r-vis","chapter":"第 3 章 数据可视化","heading":"第 3 章 数据可视化","text":"","code":""},{"path":"r-vis.html","id":"ggplot2绘图相关","chapter":"第 3 章 数据可视化","heading":"3.1 ggplot2绘图相关","text":"","code":""},{"path":"r-vis.html","id":"ggplot2绘制桑基冲击图","chapter":"第 3 章 数据可视化","heading":"3.1.1 ggplot2绘制桑基(冲击图)","text":"\n图3.1: ggplot2绘制桑基图示例\n","code":"\nlibrary(ggforce)\nlibrary(ggsci)\ntitanic <- reshape2::melt(Titanic)\n# This is how we usually envision data for parallel sets\n#head(titanic)\n# Reshape for putting the first 4 columns as axes in the plot\ntitanic <- gather_set_data(titanic, 1:4)\n#head(titanic)\n# Do the plotting\nggplot(titanic, aes(x, id = id, split = y, value = value)) +\n  geom_parallel_sets(aes(fill = Sex), alpha = 0.3, axis.width = 0.1) +\n  geom_parallel_sets_axes(axis.width = 0.2) +\n  geom_parallel_sets_labels(colour = 'white',angle = 0, size = 6) +\n  scale_y_continuous(expand = c(0,0)) +\n  scale_fill_aaas() +\n  theme_minimal() +\n  theme(axis.text.y = element_blank(),\n        axis.text.x = element_text(size = 12),\n        axis.title = element_blank(),\n        panel.background = element_blank(),\n        panel.grid = element_blank())"},{"path":"r-vis.html","id":"其他tips","chapter":"第 3 章 数据可视化","heading":"3.1.2 其他Tips","text":"限制Y轴范围：输出中文坐标轴文字角度导出PPT格式渐变色填充坐标轴刻度长度颠倒XY轴","code":"\ncoord_cartesian(ylim = c(5, 22))\ntheme_bw(base_family = \"STKaiti\")\naxis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)\nexport::graph2ppt(p2, width = 6, height = 5,\n                  margins = c(top = 0.5, right = 0.5, \n                                  bottom = 0.5, left= 0.5), \n                  center = TRUE,\n                  file = '../results/PPT/稻瘟病发病情况（2020）.ppt'NA)NA\nscale_fill_gradient2(low = \"#000080\", mid = \"white\", high = \"#B22222\")\ntheme(axis.ticks.length.y = unit(0,'mm'))\ncoord_flip()"},{"path":"r-vis.html","id":"ggtree学习笔记","chapter":"第 3 章 数据可视化","heading":"3.2 ggtree学习笔记","text":"","code":""},{"path":"r-vis.html","id":"写在前面","chapter":"第 3 章 数据可视化","heading":"3.2.1 写在前面","text":"Y叔的ggtree(Yu et al. 2017)毫无疑问是当前绘制美化系统发育树（下文简称进化树）的最佳工具，一直想学习，但是都没有真真正正学习过，一是因为网上关于gtree的中文资源较少，另外一个原因是感觉到自己用不上，就没认真学习。春节在家，实在无聊，下定决心学一遍ggtree。下面的内容来自Y叔的博客，若有不当之处，恳请批评指正。","code":""},{"path":"r-vis.html","id":"关于进化树","chapter":"第 3 章 数据可视化","heading":"3.2.2 关于进化树","text":"","code":""},{"path":"r-vis.html","id":"进化树怎么看","chapter":"第 3 章 数据可视化","heading":"3.2.2.1 进化树怎么看","text":"进化树展示的是进化关系，简单说就是亲缘关系，通常是使用物种的遗传序列（如DNA序列、氨基酸序列等）来构建的。进化树看起来和层次聚类很像，这两者有木有区别呢？Y叔在统计之都上的文章是这样描述的：层次聚类的侧重点在于分类，把距离近的聚在一起。而进化树的构建可以说也是一个聚类过程，但侧重点在于推测进化关系和进化距离 (evolutionary distance)。上图展示的是典型的系统发育树。图中绿色、蓝色和红色的点都是nodes，也就是节点（个人理解），其中最外层绿色的点表示的是每个sample，这时绿色的点也叫tips；蓝色的点表示的是父节点，也就是从外往内两两sample的共有节点，可以理解成祖先（ancestor），祖先之间还可以继续往上溯源，最终就汇集到红色的点，这个红色的点也就是root，需要注意的是有根树才具有root节点；横线叫做分支(branches)，这些横线表示的是进化变化（evolutionary changes），线的长短表示的是以时间或遗传变异为单位的进化变化。","code":""},{"path":"r-vis.html","id":"进化树数据格式","chapter":"第 3 章 数据可视化","heading":"3.2.3 进化树数据格式","text":"进化树的数据格式有多种，常见的有Newick、NEXUS及Phylip。","code":""},{"path":"r-vis.html","id":"newick格式","chapter":"第 3 章 数据可视化","heading":"3.2.3.1 Newick格式","text":"Newick格式是最常见的使用最广泛的进化树数据格式。上图是一个标准的进化树图，其对应的Newick格式为：数据格式和图是一一对应的，假如我们看图的时候是从外到内，那t3和t4是最近的，在数据中，t3和t4也是在一个括号里面的，数据的最小单位是一对()，就像剥洋葱那样顺着括号一层一层往外剥的时候，就能得到上图的那种样式。冒号后面对应的是横线上的“距离”，父节点的“距离”是两个“子节点”共有的，因此，需要表示“父节点”的“距离”时，需要将“距离”放在“子节点“的括号外。","code":"((t2:0.04,t1:0.34):0.89,(t5:0.37,(t4:0.03,t3:0.67):0.9):0.59); "},{"path":"r-vis.html","id":"nexus格式","chapter":"第 3 章 数据可视化","heading":"3.2.3.2 NEXUS格式","text":"NEXUS格式是Newick格式的拓展，以blocks为单位将进化树的元素分开。","code":"#NEXUS\n[R-package APE, Wed Nov  9 11:46:32 2016]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 5;\n    TAXLABELS\n        t5\n        t4\n        t1\n        t2\n        t3\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   t5,\n        2   t4,\n        3   t1,\n        4   t2,\n        5   t3\n    ;\n    TREE * UNTITLED = [&R] (1:0.89,((2:0.59,3:0.37):0.34,\n    (4:0.03,5:0.67):0.9):0.04);\nEND;"},{"path":"r-vis.html","id":"其他格式","chapter":"第 3 章 数据可视化","heading":"3.2.3.3 其他格式","text":"进化树的存储格式还有很多种，更多请参照Y叔的博客\\(^{[4]}\\)。","code":""},{"path":"r-vis.html","id":"进化树数据处理","chapter":"第 3 章 数据可视化","heading":"3.2.4 进化树数据处理","text":"进化树数据可以使用treeio\\(^{[5]}\\)这个包进行合并等操作，然后可以将其他信息利用tidytree\\(^{[6]}\\)这个包将树文件转换成R里面常见的数据框格式，这种格式也可以再次转化成树文件，利用ggtree进行可视化。","code":""},{"path":"r-vis.html","id":"phylo对象","chapter":"第 3 章 数据可视化","heading":"3.2.4.1 phylo对象","text":"phylo格式是R包ape支持的格式，在R中的很多包都依赖于这种格式。tidytree中的函数as_tibble可以将phylo转换成数据框，此时的数据框是个tbl_tree对象。此时得到的是phylo对象：现在将其转化成数据框：看图更直观：可以清楚地看到进化树的全部信息，包括父节点、节点、分支长度及tips的标签等。使用as.phylo(x)就能将数据框转换成phylo:如果此时我们需要添加信息的话，在原始文件上添加信息是比较麻烦的，但是可以团购先构建数据框，然后将两个数据框join在一起就可以了：","code":"\nlibrary(ggtree)\nlibrary(ape)\n\nset.seed(2017)\ntree <- rtree(4)\ntree\n## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nlibrary(tidytree)\nx <- as_tibble(tree)\nx\n## # A tibble: 7 x 4\n##   parent  node branch.length label\n##    <int> <int>         <dbl> <chr>\n## 1      5     1       0.435   t4   \n## 2      7     2       0.674   t1   \n## 3      7     3       0.00202 t3   \n## 4      6     4       0.0251  t2   \n## 5      5     5      NA       <NA> \n## 6      5     6       0.472   <NA> \n## 7      6     7       0.274   <NA>\nas.phylo(x)\n## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nd <- tibble(label = paste0('t', 1:4),\n            trait = rnorm(4))\n\ny <- full_join(x, d, by = 'label')\ny"},{"path":"r-vis.html","id":"treedata对象","chapter":"第 3 章 数据可视化","heading":"3.2.4.2 treedata对象","text":"tidytree默认的格式是treedata，函数as.treedata可以将前面的数据框转换成treedata对象：同样也可以通过as_tibble将treedata转换成数据框格式：","code":"\nas.treedata(y)\n## 'treedata' S4 object'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'trait'.\ny %>% as.treedata %>% as_tibble\n## # A tibble: 7 x 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     5      NA       <NA>  NA    \n## 6      5     6       0.472   <NA>  NA    \n## 7      6     7       0.274   <NA>  NA"},{"path":"r-vis.html","id":"树文件融合","chapter":"第 3 章 数据可视化","heading":"3.2.4.3 树文件融合","text":"treeio同的函数merge_tree()可以对多个树文件进行合并，原理是以node/branches为`key进行数据合并，如：合并后的树文件，除开node和branches外，其余的所有附加信息都变成了变量。既然是个数据框，那就可以对这些数据进行可视化：还可以利用该函数比较不同软件的分析结果：","code":"\nlibrary(treeio)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nrst_file <- system.file(\"examples/rst\", package=\"ggtree\")\nmlc_file <- system.file(\"examples/mlc\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\ncodeml_tree <- read.codeml(rst_file, mlc_file)\n\nmerged_tree <- merge_tree(beast_tree, codeml_tree)\nmerged_tree\n## 'treedata' S4 object that stored information of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree',\n##  '/home/ygc/R/library/ggtree/examples/rst',\n##  '/home/ygc/R/library/ggtree/examples/mlc'.\n## \n## ...@ phylo: \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, A/New_York/452/1999, A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##  'height',   'height_0.95_HPD',  'height_median',\n##  'height_range', 'length',   'length_0.95_HPD',\n##  'length_median',    'length_range', 'posterior',    'rate',\n##  'rate_0.95_HPD',    'rate_median',  'rate_range',   'subs',\n##  'AA_subs',  't',    'N',    'S',    'dN_vs_dS', 'dN',   'dS',   'N_x_dN',\n##  'S_x_dS'.\nlibrary(dplyr)\ndf <- merged_tree %>% \n  as_tibble() %>%\n  select(dN_vs_dS, dN, dS, rate) %>%\n  subset(dN_vs_dS >=0 & dN_vs_dS <= 1.5) %>%\n  tidyr::gather(type, value, dN_vs_dS:dS)\ndf$type[df$type == 'dN_vs_dS'] <- 'dN/dS'\ndf$type <- factor(df$type, levels=c(\"dN/dS\", \"dN\", \"dS\"))\nggplot(df, aes(rate, value)) + geom_hex() + \n  facet_wrap(~type, scale='free_y') \nphylo <- as.phylo(beast_tree)\nN <- Nnode2(phylo)\nd <- tibble(node = 1:N, fake_trait = rnorm(N), another_trait = runif(N))\nfake_tree <- treedata(phylo = phylo, data = d)\ntriple_tree <- merge_tree(merged_tree, fake_tree)\ntriple_tree"},{"path":"r-vis.html","id":"链接外部数据","chapter":"第 3 章 数据可视化","heading":"3.2.4.4 链接外部数据","text":"进化树能够展示的东西不仅仅是进化关系，还可以增添许多信息，如基因表达量啥的。treeio的函数full_join()能够通过node或tips进行数据融合：通过node：通过tips：","code":"\nlibrary(ape)\ndata(woodmouse)\nd <- dist.dna(woodmouse)\ntr <- nj(d)\nbp <- boot.phylo(tr, \n                 woodmouse, \n                 function(x) nj(dist.dna(x)))\n\nbp2 <- tibble(node=1:Nnode(tr) + # 计算父节点数NANtip(tr), # 计算tip数NA= bp)\nfull_join(tr, bp2, by=\"node\")\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nx <- tibble(label = as.phylo(beast)$tip.label, trait = rnorm(Ntip(beast)))\nfull_join(beast, x, by=\"label\")"},{"path":"r-vis.html","id":"如何找到想要的node","chapter":"第 3 章 数据可视化","heading":"3.2.4.5 如何找到想要的node","text":"","code":"\nlibrary(ggtree)\nlibrary(ggplot2)\nset.seed(1)\ntr = rtree(10)\np  + \n  geom_label(aes(x=branch, label=node))+\n  geom_hilight(node=12, fill=\"steelblue\", alpha=.6)"},{"path":"r-vis.html","id":"分组","chapter":"第 3 章 数据可视化","heading":"3.2.4.6 分组","text":"treeio中的函数 groupOTU() 和 groupClade() 可以用于分组。","code":""},{"path":"r-vis.html","id":"groupclade","chapter":"第 3 章 数据可视化","heading":"3.2.4.6.1 groupClade","text":"以node17和node21为界将clade进行分组。这两个函数可以作用于tbl_tree、phylo 、 treedata及 ggtree 这些对象。","code":"\nnwk <- '(((((((A:4,B:4):6,C:5):8,D:6):3,E:21):10,((F:4,G:12):14,H:8):13):13,((I:5,J:2):30,(K:11,L:11):2):17):4,M:56);'\ntree <- read.tree(text=nwk)\ngroupClade(as_tibble(tree), c(17, 21))\n## # A tibble: 25 x 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     1    \n##  2     20     2             4 B     1    \n##  3     19     3             5 C     1    \n##  4     18     4             6 D     1    \n##  5     17     5            21 E     1    \n##  6     22     6             4 F     2    \n##  7     22     7            12 G     2    \n##  8     21     8             8 H     2    \n##  9     24     9             5 I     0    \n## 10     24    10             2 J     0    \n## # … with 15 more rowsNA"},{"path":"r-vis.html","id":"groupotu","chapter":"第 3 章 数据可视化","heading":"3.2.4.6.2 groupOTU","text":"更常见的分组方法是直接命名分组：","code":"\nset.seed(2017)\ntr <- rtree(4)\nx <- as_tibble(tr)\n## 输入的节点可以是节点ID，也可以是LabelNAgroupOTU(x, c('t1', 't4'), group_name = \"fake_group\")\n## # A tibble: 7 x 5\n##   parent  node branch.length label fake_group\n##    <int> <int>         <dbl> <chr> <fct>     \n## 1      5     1       0.435   t4    1         \n## 2      7     2       0.674   t1    1         \n## 3      7     3       0.00202 t3    0         \n## 4      6     4       0.0251  t2    0         \n## 5      5     5      NA       <NA>  1         \n## 6      5     6       0.472   <NA>  1         \n## 7      6     7       0.274   <NA>  1\ncls <- list(c1=c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n            c2=c(\"F\", \"G\", \"H\"),\n            c3=c(\"L\", \"K\", \"I\", \"J\"),\n            c4=\"M\")\n\nas_tibble(tree) %>% groupOTU(cls)\n## # A tibble: 25 x 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     c1   \n##  2     20     2             4 B     c1   \n##  3     19     3             5 C     c1   \n##  4     18     4             6 D     c1   \n##  5     17     5            21 E     c1   \n##  6     22     6             4 F     c2   \n##  7     22     7            12 G     c2   \n##  8     21     8             8 H     c2   \n##  9     24     9             5 I     c3   \n## 10     24    10             2 J     c3   \n## # … with 15 more rowsNA"},{"path":"r-vis.html","id":"重新标准化分支","chapter":"第 3 章 数据可视化","heading":"3.2.4.6.3 重新标准化分支","text":"不同的进化树可以进行合并，原始的分支长度可能单位不一样，这时候就可以用合并后的其他参数对分支长度进行标准化。从上图可以看到的是，三个图的“横坐标”范围不一样，第一个图是原始的分支单位，第二个是以dN进行标准化的结果，第三个是以rate进行标准化的结果。","code":"\np1 <- ggtree(merged_tree) + theme_tree2()\np2 <- ggtree(rescale_tree(merged_tree, 'dN')) + theme_tree2()\np3 <- ggtree(rescale_tree(merged_tree, 'rate')) + theme_tree2()\n\ncowplot::plot_grid(p1, p2, p3, ncol=3, labels = LETTERS[1:3])"},{"path":"r-vis.html","id":"子集操作","chapter":"第 3 章 数据可视化","heading":"3.2.4.7 子集操作","text":"","code":""},{"path":"r-vis.html","id":"从树中除去tips","chapter":"第 3 章 数据可视化","heading":"3.2.4.7.1 从树中除去tips","text":"有些时候出于某些原因（如序列质量、组装质量、比对错误等），我们会将某些tips（样本）从树里面剔除，函数drop.tip()可以实现这一功能：","code":"\nf <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(f)\nto_drop <- c(\"Physonect_sp_@2066767\",\n             \"Lychnagalma_utricularia@2253871\",\n             \"Kephyes_ovata@2606431\")\np1 <- ggtree(nhx) + geom_tiplab(aes(color = label %in% to_drop)) +\n  scale_color_manual(values=c(\"black\", \"red\")) + xlim(0, 0.8)\n\nnhx_reduced <- drop.tip(as.phylo(nhx), to_drop) # 发现需要转换成phylo对象才行NAp2 <- ggtree(nhx_reduced) + geom_tiplab() + xlim(0, 0.8)  \ncowplot::plot_grid(p1, p2, ncol=2, labels = c(\"A\", \"B\"))"},{"path":"r-vis.html","id":"根据tips取子集","chapter":"第 3 章 数据可视化","heading":"3.2.4.7.2 根据tips取子集","text":"如果一个进化树很复杂的话，要看我们感兴趣的部分就很难，这时候就需要将我们感兴趣的部分提取出来。treeio中的函数tree_subset()能够完成这一功能，即使是提取出来的子集，结构还是和原来的一样，不会发生变化。","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\np1 = ggtree(beast_tree) + \n  geom_tiplab() +  \n  ggtitle('原始树')NA+NAxlim(0, 40) + theme_tree2()\n\ntree2 = tree_subset(beast_tree, \"A/Swine/HK/168/2012\", levels_back=4)  \np2 <- ggtree(tree2, aes(color=group)) +\n  ggtitle('取子集')NA+NAscale_color_manual(values = c(\"black\", \"red\")) +\n  geom_tiplab() +  xlim(0, 4) + theme_tree2() \n\np3 <- ggtree(tree2, aes(color=group)) +\n  geom_tiplab(hjust = -.1) + xlim(0, 5) + \n  geom_point(aes(fill = rate), shape = 21, size = 4) +\n  ggtitle('用rate这个变量控制颜色'NA)NA+NAscale_color_manual(values = c(\"black\", \"red\"), guide = FALSE) +\n  scale_fill_continuous(low = 'blue', high = 'red') +\n  theme_tree2() + theme(legend.position = 'right')\n\n\np4 <- ggtree(tree2, aes(color=group), \n             root.position = as.phylo(tree2)$root.edge) +\n  geom_tiplab() + xlim(18, 24) + \n  ggtitle('添加根节点但不显示'NA)NA+NAscale_color_manual(values = c(\"black\", \"red\")) +\n  theme_tree2()\n\np5 <- ggtree(tree2, aes(color=group), \n             root.position = as.phylo(tree2)$root.edge) +\n  geom_rootedge() + geom_tiplab() + xlim(0, 40) + \n  ggtitle('添加根节点且显示'NA)NA+NAscale_color_manual(values = c(\"black\", \"red\")) +\n  theme_tree2()\n\nplot_grid(p2, p3, p4, p5, ncol=2) %>%\n  plot_grid(p1, ., ncol=2)"},{"path":"r-vis.html","id":"根据内部节点编号取子集","chapter":"第 3 章 数据可视化","heading":"3.2.4.7.3 根据内部节点编号取子集","text":"如果我们对特定的进化分支（clade）感兴趣，那也可以通过tree_subset()函数将感兴趣的分支进行放大展示，但是这个时候需要我们知道感兴趣的进化分支所对应的node编号才行。","code":"\nclade <- tree_subset(beast_tree, node=121, levels_back=0)\nclade2 <- tree_subset(beast_tree, node=121, levels_back=2)\np1 <- ggtree(clade) + \n  ggtitle('感兴趣的整个分支'NA)NA+NAgeom_tiplab() + xlim(0, 5)\np2 <- ggtree(clade2, aes(color=group)) + \n  ggtitle('感兴趣的整个分支 + 回退两个节点'NA)NA+NAgeom_tiplab() + \n  xlim(0, 8) + scale_color_manual(values=c(\"black\", \"red\"))\n\n\nlibrary(ape)\nlibrary(tidytree)\nlibrary(treeio)\ndata(chiroptera)\n\n# 如果不知道node的时候，就直接进行匹配NAnodes <- grep(\"Plecotus\", chiroptera$tip.label)\nchiroptera <- groupOTU(chiroptera, nodes)\n\np3 <- ggtree(chiroptera, aes(colour = group)) + \n  ggtitle('整个进化树中选择感兴趣的整个分支'NA)NA+NAscale_color_manual(values=c(\"black\", \"red\")) +\n  theme(legend.position = \"none\")\n\nclade <- MRCA(chiroptera, nodes) # 最近的父节点NAx <- tree_subset(chiroptera, clade, levels_back = 0)\np4 <- ggtree(x) + \n  ggtitle('感兴趣的特有分支'NA)NA+NAgeom_tiplab() + xlim(0, 5)\n\nplot_grid(p1, p2, p3, p4,ncol=2)"},{"path":"r-vis.html","id":"导出数据","chapter":"第 3 章 数据可视化","heading":"3.2.4.8 导出数据","text":"treeio这个R包可以导出多种格式的文件，这个比较简单，详情参照：https://yulab-smu.top/treedata-book/chapter3.html","code":""},{"path":"r-vis.html","id":"进化树可视化","chapter":"第 3 章 数据可视化","heading":"3.2.5 进化树可视化","text":"","code":""},{"path":"r-vis.html","id":"基础方法","chapter":"第 3 章 数据可视化","heading":"3.2.5.1 基础方法","text":"ggtree对进化树进行可视化的方法有两种：ggplot() + geom_tree() + theme_tree()ggtree()第二种方法是第一种方法的“缩写版”。这两种方法得到的结果是一样的：ggtree支持ggplot2的图形语法，因此，也可以在ggtree中对颜色性状等进行修改：可以使用参数branch.length对egde进行标准化，如果参数为none，则是这样：","code":"\nlibrary(treeio)\nlibrary(ggtree)\n\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\n\nggplot(tree, aes(x, y)) + geom_tree() + theme_tree()\nggtree(tree)library(ggplot2)\nlibrary(treeio)\nlibrary(ggtree)\n\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\n\nggplot(tree, aes(x, y)) + geom_tree() + theme_tree()\nggtree(tree)\n\np1 = ggtree(tree, color=\"firebrick\", size=2, linetype=\"dotted\") +\n  ggtitle('阶梯化')\np2 = ggtree(tree, color=\"firebrick\", size=2, linetype=\"dotted\", ladderize=FALSE) +\n  ggtitle('非阶梯化')\n\ncowplot::plot_grid(p1,p2)v\nggtree(tree, branch.length=\"none\")"},{"path":"r-vis.html","id":"输出样式","chapter":"第 3 章 数据可视化","heading":"3.2.5.2 输出样式","text":"ggtree支持多种输出样式：当只是展示树结构而没有分支长度标尺的时候，就用最下面这4种。还有其他的多种对齐方式：如果是时间范围数据的话，则需要调用参数mrsd（recent sample data）：","code":"\nlibrary(ggtree)\nset.seed(2017-02-16)\ntree <- rtree(50)\np1 = ggtree(tree) +\n  ggtitle('默认'NA)NAp2 = ggtree(tree, layout=\"roundrect\")  +\n  ggtitle('roundrect')\np3 = ggtree(tree, layout=\"slanted\") +\n  ggtitle('slanted')\np4 = ggtree(tree, layout=\"ellipse\") +\n  ggtitle('ellipse')\np5 = ggtree(tree, layout=\"circular\") +\n  ggtitle('circular')\np6 = ggtree(tree, layout=\"fan\", open.angle=120) +\n  ggtitle('fan')\np7 = ggtree(tree, layout=\"equal_angle\") +\n  ggtitle('equal_angle')\np8 = ggtree(tree, layout=\"daylight\") +\n  ggtitle('daylight')\np9 = ggtree(tree, branch.length='none') +\n  ggtitle('none')\np10 = ggtree(tree, layout=\"ellipse\", branch.length=\"none\") +\n  ggtitle('ellipse对齐'NA)NAp11 = ggtree(tree, branch.length='none', layout='circular') +\n  ggtitle('circular对齐'NA)NAp12 = ggtree(tree, layout=\"daylight\", branch.length = 'none') +\n  ggtitle('daylight对齐'NA)NAcowplot::plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12, ncol = 4)\nggtree(tree) + scale_x_reverse()\nggtree(tree) + coord_flip()\nggtree(tree) + layout_dendrogram()\nggplotify::as.ggplot(ggtree(x), angle=-30, scale=.9)\nggtree(tree, layout='slanted') + coord_flip()\nggtree(tree, layout='slanted', branch.length='none') + layout_dendrogram()\nggtree(tree, layout='circular') + xlim(-10, NA)\nggtree(tree) + layout_inward_circular()\nggtree(tree) + layout_inward_circular(xlim=15)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", \n                          package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nggtree(beast_tree, mrsd=\"2013-01-01\") + theme_tree2()"},{"path":"r-vis.html","id":"展示相关元素","chapter":"第 3 章 数据可视化","heading":"3.2.5.3 展示相关元素","text":"","code":""},{"path":"r-vis.html","id":"展示进化距离","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.1 展示进化距离","text":"函数geom_treescale()用于展示进化距离。","code":"\np1 = ggtree(tree) + geom_treescale() + ggtitle('默认'NA)NAp2 = ggtree(tree) + geom_treescale(x=0, y=45, width=1, color='red') +\n  ggtitle('设定位置、宽度、颜色'NA)NAp3 = ggtree(tree) + geom_treescale(fontsize=6, linesize=2, offset=1) +\n  ggtitle('设定字体大小、线条大小、缩进'NA)NAp4 = ggtree(tree) + theme_tree2() +\n  ggtitle('使用内置主题'NA)NAcowplot::plot_grid(p1,p2,p3,p4, ncol = 2)"},{"path":"r-vis.html","id":"展示nodestips","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.2 展示nodes/tips","text":"","code":"\np1 = ggtree(tree) + geom_point(aes(shape=isTip, color=isTip), size=3) +\n  ggtitle('使用geom_point()函数'NA)NAp2 <- ggtree(tree) + geom_nodepoint(color=\"#b5e521\", alpha=1/4, size=10) +\n  geom_tippoint(color=\"#FDAC4F\", shape=8, size=3) +\n  ggtitle('使用两个函数'NA)NAcowplot::plot_grid(p1,p2, ncol = 2)"},{"path":"r-vis.html","id":"展示tips的标签","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.3 展示tips的标签","text":"","code":"\np1 = ggtree(tree) + geom_nodepoint(color=\"#b5e521\", alpha=1/4, size=10) +\n  geom_tippoint(color=\"#FDAC4F\", shape=8, size=3) + \n  geom_tiplab(size=3, color=\"purple\")\n\np2 = ggtree(tree, layout=\"circular\") + \n  geom_tiplab(aes(angle=angle), color='blue')\n\np3 = ggtree(tree, branch.length = 'none') + \n  geom_tiplab(as_ylab=TRUE, color='firebrick')\n\ncowplot::plot_grid(p1, p2,p3, ncol = 3)"},{"path":"r-vis.html","id":"展示根节点","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.4 展示根节点","text":"","code":"\n## with root edge = 1\ntree1 <- read.tree(text='((A:1,B:2):3,C:2):1;')\np1 = ggtree(tree1) + geom_tiplab() + geom_rootedge() +\n  ggtitle('有根节点信息'NA)NA## without root edge\ntree2 <- read.tree(text='((A:1,B:2):3,C:2);')\np2 = ggtree(tree2) + geom_tiplab() + geom_rootedge() +\n  ggtitle('无根节点信息，默认无'NA)NA## setting root edge\ntree2$root.edge <- 2\np3 = ggtree(tree2) + geom_tiplab() + geom_rootedge() +\n  ggtitle('无根节点信息，添加信息'NA)NA## specify length of root edge for just plotting\n## this will ignore tree$root.edge\np4 = ggtree(tree2) + geom_tiplab() + geom_rootedge(rootedge = 3) +\n  ggtitle('无根节点信息，设置信息'NA)NAcowplot::plot_grid(p1,p2,p3,p4, ncol = 2)"},{"path":"r-vis.html","id":"上色","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.5 上色","text":"上色直接是很简单，就像ggplot2那样：","code":"\nggtree(beast_tree, aes(color=rate)) +\n  scale_color_continuous(low='darkgreen', high='red') +\n  theme(legend.position=\"right\")\nanole.tree<-read.tree(\"http://www.phytools.org/eqg2015/data/anole.tre\")\nsvl <- read.csv(\"http://www.phytools.org/eqg2015/data/svl.csv\",\n                row.names=1)\nsvl <- as.matrix(svl)[,1]\nfit <- phytools::fastAnc(anole.tree,svl,vars=TRUE,CI=TRUE)\n\ntd <- data.frame(node = nodeid(anole.tree, names(svl)),\n                 trait = svl)\nnd <- data.frame(node = names(fit$ace), trait = fit$ace)\n\nd <- rbind(td, nd)\nd$node <- as.numeric(d$node)\ntree <- full_join(anole.tree, d, by = 'node')\n\np1 <- ggtree(tree, aes(color=trait), layout = 'circular', \n             ladderize = FALSE, continuous = TRUE, size=2) +\n  scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n  geom_tiplab(hjust = -.1) + \n  xlim(0, 1.2) + \n  theme(legend.position = c(.05, .85)) \n\np2 <- ggtree(tree, layout='circular', ladderize = FALSE, size=2.8) + \n  geom_tree(aes(color=trait), continuous=T, size=2) +  \n  scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n  geom_tiplab(aes(color=trait), hjust = -.1) + \n  xlim(0, 1.2) + \n  theme(legend.position = c(.05, .85)) \n\ncowplot::plot_grid(p1, p2, ncol=2, labels=c(\"分支默认边框\"色边\"分支黑色边框\"NA)NA)NA"},{"path":"r-vis.html","id":"对树进行重新标准化","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.6 对树进行重新标准化","text":"多个参数对进化树进行标准化，时间序列相关的参数用msrd，其余的参数可以用branch.length。也可以用rescale_tree对树进行标准化：","code":"library(treeio)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nbeast_tree\n\np1 <- ggtree(beast_tree, mrsd='2013-01-01') + theme_tree2() +\n  labs(caption=\"时间序列\")\np2 <- ggtree(beast_tree, branch.length='rate') + theme_tree2() +\n  labs(caption=\"取代速率\")\n\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nmlc_tree <- read.codeml_mlc(mlcfile)\np3 <- ggtree(mlc_tree) + theme_tree2() +\n  labs(caption=\"单密码子核苷酸取代\")\np4 <- ggtree(mlc_tree, branch.length='dN_vs_dS') + theme_tree2() +\n  labs(caption=\"dN/dS\")\n\ncowplot::plot_grid(p1,p2,p3,p4, ncol = 2\nbeast_tree2 <- rescale_tree(beast_tree, branch.length='rate')\nggtree(beast_tree2) + theme_tree2()"},{"path":"r-vis.html","id":"背景色","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.7 背景色","text":"","code":"\nset.seed(2019)\nx <- rtree(30)\np1 = ggtree(x, color=\"red\") + theme_tree(\"steelblue\")\np2 = ggtree(x, color=\"white\") + theme_tree(\"black\")\n\ncowplot::plot_grid(p1,p2, ncol = 1)"},{"path":"r-vis.html","id":"批量建树","chapter":"第 3 章 数据可视化","heading":"3.2.5.3.8 批量建树","text":"批量建树就相当于ggplot2中的分面：","code":"\n## trees <- lapply(c(10, 20, 40), rtree)\n## class(trees) <- \"multiPhylo\"\n## ggtree(trees) + facet_wrap(~.id, scale=\"free\") + geom_tiplab()\n\nr8s <- read.r8s(system.file(\"extdata/r8s\", \"H3_r8s_output.log\", package=\"treeio\"))\nggtree(r8s) + facet_wrap( ~.id, scale=\"free\") + theme_tree2()"},{"path":"r-vis.html","id":"进化树注释","chapter":"第 3 章 数据可视化","heading":"3.2.6 进化树注释","text":"","code":""},{"path":"r-vis.html","id":"基本用法","chapter":"第 3 章 数据可视化","heading":"3.2.6.1 基本用法","text":"注释的信息很多，节点的分组、样品来源、基因表达量等都可以作为注释的信息。一个简单的例子：","code":"\nlibrary(ggtree)\ntreetext = \"(((ADH2:0.1[&&NHX:S=human], ADH1:0.11[&&NHX:S=human]):\n0.05 [&&NHX:S=primates:D=Y:B=100],ADHY:\n0.1[&&NHX:S=nematode],ADHX:0.12 [&&NHX:S=insect]):\n0.1[&&NHX:S=metazoa:D=N],(ADH4:0.09[&&NHX:S=yeast],\nADH3:0.13[&&NHX:S=yeast], ADH2:0.12[&&NHX:S=yeast],\nADH1:0.11[&&NHX:S=yeast]):0.1[&&NHX:S=Fungi])[&&NHX:D=N];\"\ntree <- read.nhx(textConnection(treetext))\nggtree(tree) + geom_tiplab() + \n  geom_label(aes(x=branch, label=S), fill='lightgreen') + \n  geom_label(aes(label=D), fill='steelblue') + \n  geom_text(aes(label=B), hjust=-.5)"},{"path":"r-vis.html","id":"clade注释","chapter":"第 3 章 数据可视化","heading":"3.2.6.2 clade注释","text":"同样也适用于无根输出样式，可以根据node的编号，也可以直接用tips的标签（这个是真的赞啊）：","code":"\nset.seed(2015-12-21)\ntree <- rtree(30)\np1 <- ggtree(tree) + xlim(NA, 6)\n\np2 = p1 + geom_cladelabel(node=45, label=\"test label\") +\n  geom_cladelabel(node=34, label=\"another clade\")\n\np3 = p1 + geom_cladelabel(node=45, label=\"test label\", align=TRUE,  offset = .2, color='red') +\n  geom_cladelabel(node=34, label=\"another clade\", align=TRUE, offset = .2, color='blue')\n\np4 = p1 + geom_cladelabel(node=45, label=\"test label\", align=T, angle=270, hjust='center', offset.text=.5, barsize=1.5) +\n  geom_cladelabel(node=34, label=\"another clade\", align=T, angle=45, fontsize=8)\n\np5 = p1 + geom_cladelabel(node=34, label=\"another clade\", align=T, geom='label', fill='lightblue')\n\ncowplot::plot_grid(p2,p3,p4,p5,ncol = 2)\np1 = ggtree(tree, layout=\"daylight\") + \n  geom_cladelabel(node=35, label=\"test label\", angle=0, \n                  fontsize=8, offset=.5, vjust=.5)  + \n  geom_cladelabel(node=55, label='another clade', \n                  angle=-95, hjust=.5, fontsize=8)\n\n\np2 = ggtree(tree) + xlim(NA, 6) + \n  geom_tiplab() + \n  geom_strip('t10', 't30', barsize=2, color='red', \n             label=\"associated taxa\", offset.text=.1) + \n  geom_strip('t1', 't18', barsize=2, color='blue', \n             label = \"another label\", offset.text=.1)\n\ncowplot::plot_grid(p1,p2,ncol = 2)"},{"path":"r-vis.html","id":"局部高亮","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.1 局部高亮","text":"局部高亮可以根据node编号进行高亮，也可以使用附加数据或树数据里面的数据进行高亮：","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\n\np1 = ggtree(tree) + \n  geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n  geom_hilight(node=17, fill=\"darkgreen\", alpha=.6) \n\np2 = ggtree(tree, layout=\"circular\") + \n  geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n  geom_hilight(node=23, fill=\"darkgreen\", alpha=.6)\n\n## type can be 'encircle' or 'rect'\nggtree(tree, layout=\"daylight\", branch.length = 'none') + \n  geom_hilight(node=10) + \n  geom_hilight(node=16, fill='darkgreen', type=\"rect\")\n\n\nggtree(tree) +\n  geom_balance(node=16, fill='steelblue', color='white', alpha=0.6, extend=1) +\n  geom_balance(node=19, fill='darkgreen', color='white', alpha=0.6, extend=1) \n\n## using external data\nd <- data.frame(node=c(17, 21), type=c(\"A\", \"B\"))\nggtree(tree) + geom_hilight(data=d, aes(node=node, fill=type))\n\n## using data stored in tree object\nx <- read.nhx(system.file(\"extdata/NHX/ADH.nhx\", package=\"treeio\"))\nggtree(x) + \n  geom_hilight(mapping=aes(subset = node %in% c(10, 12), fill = S)) +\n  scale_fill_manual(values=c(\"steelblue\", \"darkgreen\"))"},{"path":"r-vis.html","id":"高亮不同分组","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.2 高亮不同分组","text":"","code":"\nmytree <- read.tree(\"data/Tree 30.4.19.nwk\")\n\n# Define nodes for coloring later on\ntiplab <- mytree$tip.label\ncls <- tiplab[grep(\"^ch\", tiplab)] \nlabeltree <- groupOTU(mytree, cls)\n\np <- ggtree(labeltree, aes(color=group, linetype=group), layout=\"circular\") +\n    scale_color_manual(values = c(\"#efad29\", \"#63bbd4\")) +\n    geom_nodepoint(color=\"black\", size=0.1) +\n    geom_tiplab(size=2, color=\"black\")\n\np2 <- flip(p, 136, 110) %>% \n    flip(141, 145) %>% \n    rotate(141) %>% \n    rotate(142) %>% \n    rotate(160) %>% \n    rotate(164) %>% \n    rotate(131)\n\n### Group V and II coloring \np3 <- p2 + geom_hilight(node = 110, fill = \"#229f8a\", alpha = 0.2, extend = 0.43) +    \n    geom_hilight(node = 88, fill = \"#229f8a\", alpha = 0.2, extend = 0.445) +\n    geom_hilight(node = 156, fill = \"#229f8a\", alpha = 0.2, extend = 0.35) +\n    geom_hilight(node = 136, fill = \"#f9311f\", alpha = 0.2, extend = 0.512)\n\n### Putting on a label on the avian specific expansion \np4 <- p3 + geom_cladelabel(node = 113, label = \"Avian-specific expansion\", \n                        align = TRUE, angle = -35, offset.text = 0.05, \n                        hjust = \"center\", fontsize = 2,  offset = 0.2, barsize = 0.2)\n    \n### Adding the bootstrap values with subset used to remove all bootstraps < 50  \np5 <- p4 + geom_text2(aes(label=label, \n                        subset = !is.na(as.numeric(label)) & as.numeric(label) > 50), \n                    size = 2, color = \"black\",nudge_y = 0.7, nudge_x = -0.05)\n \n### Putting labels on the subgroups \np6 <- p5 + geom_cladelabel(node = 114, label = \"Subgroup A\", align = TRUE, \n                        angle = -55, offset.text = .03, hjust = \"center\", \n                        offset = 0.05, barsize = 0.2, fontsize = 2) +\n            geom_cladelabel(node = 121, label = \"Subgroup B\", align = TRUE, \n                        angle = -15, offset.text = .03, hjust = \"center\", \n                        offset = 0.05, barsize = 0.2, fontsize = 2) +\n            theme(legend.position=\"none\", \n                plot.margin=grid::unit(c(-15,-15,-15,-15), \"mm\"))\n\nprint(p6)"},{"path":"r-vis.html","id":"样品连接","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.3 样品连接","text":"利用函数geom_taxalink()可以实现样品之间的连线，但是只支持有限的几种形式：","code":"\np1 <- ggtree(tree) + geom_tiplab() + \n  geom_taxalink(taxa1='A', taxa2='E') + \n  geom_taxalink(taxa1='F', taxa2='K', \n                color='red', linetype = 'dashed',\n                arrow=arrow(length=unit(0.02, \"npc\")))\n\np2 <- ggtree(tree, layout=\"circular\") + \n  geom_taxalink(taxa1='A', taxa2='E', \n                color=\"grey\",alpha=0.5, \n                offset=0.05,arrow=arrow(length=unit(0.01, \"npc\"))) + \n  geom_taxalink(taxa1='F', taxa2='K', \n                color='red', linetype = 'dashed', \n                alpha=0.5, offset=0.05,\n                arrow=arrow(length=unit(0.01, \"npc\"))) +\n  geom_taxalink(taxa1=\"L\", taxa2=\"M\", \n                color=\"blue\", alpha=0.5, \n                offset=0.05,hratio=0.8, \n                arrow=arrow(length=unit(0.01, \"npc\"))) + \n  geom_tiplab()\n\n# when the tree was created using reverse x, \n# we can set outward to FALSE, which will generate the inward curve lines.\np3 <- ggtree(tree, layout=\"inward_circular\", xlim=150) +\n  geom_taxalink(taxa1='A', taxa2='E', \n                color=\"grey\", alpha=0.5, \n                offset=-0.2, \n                outward=FALSE,\n                arrow=arrow(length=unit(0.01, \"npc\"))) +\n  geom_taxalink(taxa1='F', taxa2='K', \n                color='red', linetype = 'dashed', \n                alpha=0.5, offset=-0.2,\n                outward=FALSE,\n                arrow=arrow(length=unit(0.01, \"npc\"))) +\n  geom_taxalink(taxa1=\"L\", taxa2=\"M\", \n                color=\"blue\", alpha=0.5, \n                offset=-0.2, \n                outward=FALSE,\n                arrow=arrow(length=unit(0.01, \"npc\"))) +\n  geom_tiplab(hjust=1) \n\ndat <- data.frame(from=c(\"A\", \"F\", \"L\"), \n                  to=c(\"E\", \"K\", \"M\"), \n                  h=c(1, 1, 0.1), \n                  type=c(\"t1\", \"t2\", \"t3\"), \n                  s=c(2, 1, 2))\np4 <- ggtree(tree, layout=\"inward_circular\", xlim=c(150, 0)) +\n  geom_taxalink(data=dat, \n                mapping=aes(taxa1=from, \n                            taxa2=to, \n                            color=type, \n                            size=s), \n                ncp=10,\n                offset=0.15) + \n  geom_tiplab(hjust=1) +\n  scale_size_continuous(range=c(1,3))\ncowplot::plot_grid(p1, p2, p3, p4, ncol=2, labels=LETTERS[1:4])"},{"path":"r-vis.html","id":"uncertainty-of-evolutionary-inference","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.4 Uncertainty of evolutionary inference","text":"","code":"\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree.nex\", package = \"treeio\")\nx <- read.mega(file)\np1 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, alpha=.3)\np2 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, alpha=.3, center='reltime')  \np3 <- p2 + scale_x_range() + theme_tree2()\n\ncowplot::plot_grid(p1,p2,p3,ncol = 3)"},{"path":"r-vis.html","id":"其他软件输出的结果","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.5 其他软件输出的结果","text":"","code":"\nrstfile <- system.file(\"extdata/PAML_Codeml\", \"rst\", \n                       package=\"treeio\")\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", \n                       package=\"treeio\")\n\nml <- read.codeml(rstfile, mlcfile)\nggtree(ml, aes(color=dN_vs_dS), branch.length='dN_vs_dS') + \n  scale_color_continuous(name='dN/dS', limits=c(0, 1.5),\n                         oob=scales::squish,\n                         low='darkgreen', high='red') +\n  geom_text(aes(x=branch, label=AA_subs), \n            vjust=-.5, color='steelblue', size=2) +\n  theme_tree2(legend.position=c(.9, .3))"},{"path":"r-vis.html","id":"放大特定区域","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.6 放大特定区域","text":"","code":"\nlibrary(ggtree)\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\np1 = ggtree(tree) + geom_tiplab()\np2 = viewClade(p, MRCA(p, \"I\", \"L\"))\n\ncowplot::plot_grid(p1,p2,ncol = 2, labels = c('原图'特'特定区域'NA)NA)NA"},{"path":"r-vis.html","id":"标准化选中的clade","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.7 标准化选中的clade","text":"","code":"\ntree2 <- groupClade(tree, c(17, 21))\np <- ggtree(tree2, aes(color=group)) + theme(legend.position='none') +\n  scale_color_manual(values=c(\"black\", \"firebrick\", \"steelblue\"))\nscaleClade(p, node=17, scale=.1) "},{"path":"r-vis.html","id":"隐藏展示某个clade","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.8 隐藏/展示某个clade","text":"","code":"\np2 <- p %>% collapse(node=21) + \n  geom_point2(aes(subset=(node==21)), shape=21, size=5, fill='green')\np2 <- collapse(p2, node=23) + \n  geom_point2(aes(subset=(node==23)), shape=23, size=5, fill='red')\nprint(p2)\nexpand(p2, node=23) %>% expand(node=21)"},{"path":"r-vis.html","id":"利用三角形隐藏展示某个clade","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.9 利用三角形隐藏/展示某个clade","text":"","code":"\np2 <- p + geom_tiplab()\nnode <- 21\ncollapse(p2, node, 'max') %>% expand(node)\ncollapse(p2, node, 'min') %>% expand(node)\ncollapse(p2, node, 'mixed') %>% expand(node)\n\ncollapse(p, 21, 'mixed', fill='steelblue', alpha=.4) %>% \n  collapse(23, 'mixed', fill='firebrick', color='blue')\n  \nscaleClade(p, 23, .2) %>% collapse(23, 'min', fill=\"darkgreen\")  "},{"path":"r-vis.html","id":"分组taxa","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.10 分组Taxa","text":"另外一种方法：","code":"\nlibrary(ggsci)\n\ndata(iris)\nrn <- paste0(iris[,5], \"_\", 1:150)\nrownames(iris) <- rn\nd_iris <- dist(iris[,-5], method=\"man\")\n\nc <- ape::bionj(d_iris)\ngrp <- list(setosa     = rn[1:50],\n            versicolor = rn[51:100],\n            virginica  = rn[101:150])\n\np_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')\ngroupOTU(p_iris, grp, 'group') + \n  aes(color=group) +\n  scale_color_aaas() +\n  theme(legend.position=\"right\")\ntree_iris <- groupOTU(tree_iris, grp, \"Species\")\nggtree(tree_iris, aes(color=Species), layout = 'circular', branch.length = 'none') + \n  theme(legend.position=\"right\")"},{"path":"r-vis.html","id":"旋转clade","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.11 旋转clade","text":"旋转clade有两种方法：","code":"\np1 <- p + geom_point2(aes(subset=node==16), color='darkgreen', size=5)\np2 <- rotate(p1, 17) %>% rotate(21) # 方法1NAflip(p2, 17, 21) # 方法2NA"},{"path":"r-vis.html","id":"外部数据mapping到树上","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.12 外部数据mapping到树上","text":"","code":"\nlibrary(ggimage)\nlibrary(ggtree)\n\n# 文件下载地址NA# https://raw.githubusercontent.com/YuLab-SMU/treedata-book/master/data/tree_boots.nwk\n# https://raw.githubusercontent.com/YuLab-SMU/treedata-book/master/data/tip_data.csv\n\n\nx <- read.tree(\"tree_boots.nwk\")\ninfo <- read.csv(\"tip_data.csv\")\n\np <- ggtree(x) %<+% info + xlim(-.1, 4)\np2 <- p + geom_tiplab(offset = .6, hjust = .5) +\n  geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, size = mass_in_kg)) + \n  theme(legend.position = \"right\") + scale_size_continuous(range = c(3, 10))\n\n#https://raw.githubusercontent.com/YuLab-SMU/treedata-book/master/data/inode_data.csv\nd2 <- read.csv(\"inode_data.csv\")\np2 %<+% d2 + geom_label(aes(label = vernacularName.y, fill = posterior)) + \n  scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\"))"},{"path":"r-vis.html","id":"将snp数据添加到树上","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.13 将SNP数据添加到树上","text":"","code":"\nlibrary(ggtree)\n## remote_folder <- paste0(\"https://raw.githubusercontent.com/katholt/\",\n##                         \"plotTree/master/tree_example_april2015/\")\nremote_folder <- \"data/tree_example_april2015/\" \n\n## read the phylogenetic tree\ntree <- read.tree(paste0(remote_folder, \"tree.nwk\"))\n\n## read the sampling information data set\ninfo <- read.csv(paste0(remote_folder,\"info.csv\"))\n\n## read and process the allele table\nsnps<-read.csv(paste0(remote_folder, \"alleles.csv\"), header = F,\n                row.names = 1, stringsAsFactor = F)\nsnps_strainCols <- snps[1,] \nsnps<-snps[-1,] # drop strain names\ncolnames(snps) <- snps_strainCols\n\ngapChar <- \"?\"\nsnp <- t(snps)\nlsnp <- apply(snp, 1, function(x) {\n        x != snp[1,] & x != gapChar & snp[1,] != gapChar\n    })\nlsnp <- as.data.frame(lsnp)\nlsnp$pos <- as.numeric(rownames(lsnp))\nlsnp <- tidyr::gather(lsnp, name, value, -pos)\nsnp_data <- lsnp[lsnp$value, c(\"name\", \"pos\")]\n\n## read the trait data\nbar_data <- read.csv(paste0(remote_folder, \"bar.csv\"))\n\n## visualize the tree \np <- ggtree(tree) \n\n## attach the sampling information data set \n## and add symbols colored by location\np <- p %<+% info + geom_tippoint(aes(color=location))\n\n## visualize SNP and Trait data using dot and bar charts,\n## and align them based on tree structure\np + geom_facet(panel = \"SNP\", data = snp_data, geom = geom_point, \n               mapping=aes(x = pos, color = location), shape = '|') +\n    geom_facet(panel = \"Trait\", data = bar_data, geom = ggstance::geom_barh, \n                aes(x = dummy_bar_value, color = location, fill = location), \n                stat = \"identity\", width = .6) +\n    theme_tree2(legend.position=c(.05, .85))"},{"path":"r-vis.html","id":"关联矩阵","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.14 关联矩阵","text":"","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\ngenotype_file <- system.file(\"examples/Genotype.txt\", package=\"ggtree\")\ngenotype <- read.table(genotype_file, sep=\"\\t\", stringsAsFactor=F)\ncolnames(genotype) <- sub(\"\\\\.$\", \"\", colnames(genotype))\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_treescale(x=2008, y=1, offset=2) + \n    geom_tiplab(size=2)\ngheatmap(p, genotype, offset=5, width=0.5, font.size=3, \n        colnames_angle=-45, hjust=0) +\n    scale_fill_manual(breaks=c(\"HuH3N2\", \"pdm\", \"trig\"), \n        values=c(\"steelblue\", \"firebrick\", \"darkgreen\"), name=\"genotype\")\n\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_tiplab(size=2, align=TRUE, linesize=.5) + \n    theme_tree2()\ngheatmap(p, genotype, offset=8, width=0.6, \n        colnames=FALSE, legend_title=\"genotype\") +\n    scale_x_ggtree() + \n    scale_y_continuous(expand=c(0, 0.3))"},{"path":"r-vis.html","id":"关联多个矩阵","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.15 关联多个矩阵","text":"","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\n\ntree <- read.tree(nwk)\ncirc <- ggtree(tree, layout = \"circular\")\n\ndf <- data.frame(first=c(\"a\", \"b\", \"a\", \"c\", \"d\", \"d\", \"a\", \"b\", \"e\", \"e\", \"f\", \"c\", \"f\"),\n                 second= c(\"z\", \"z\", \"z\", \"z\", \"y\", \"y\", \"y\", \"y\", \"x\", \"x\", \"x\", \"a\", \"a\"))\nrownames(df) <- tree$tip.label\n\ndf2 <- as.data.frame(matrix(rnorm(39), ncol=3))\nrownames(df2) <- tree$tip.label\ncolnames(df2) <- LETTERS[1:3]\n\n\np1 <- gheatmap(circ, df, offset=.8, width=.2,\n               colnames_angle=95, colnames_offset_y = .25) +\n    scale_fill_viridis_d(option=\"D\", name=\"discrete\\nvalue\")\n\n\nlibrary(ggnewscale)\np2 <- p1 + new_scale_fill()\ngheatmap(p2, df2, offset=15, width=.3,\n         colnames_angle=90, colnames_offset_y = .25) +\n    scale_fill_viridis_c(option=\"A\", name=\"continuous\\nvalue\")"},{"path":"r-vis.html","id":"多序列比对可视化","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.16 多序列比对可视化","text":"","code":"\ntree <- read.tree(\"data/tree.nwk\")\np <- ggtree(tree) + geom_tiplab(size=3)\nmsaplot(p, \"data/sequence.fasta\", offset=3, width=2)\np <- ggtree(tree, layout='circular') + \n    geom_tiplab(offset=4, align=TRUE) + xlim(NA, 12)\nmsaplot(p, \"data/sequence.fasta\", window=c(120, 200))  "},{"path":"r-vis.html","id":"拼图","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.17 拼图","text":"","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n\nset.seed(2019-10-31)\ntr <- rtree(10)\n\nd1 <- data.frame(\n    # only some labels match\n    label = c(tr$tip.label[sample(5, 5)], \"A\"),\n    value = sample(1:6, 6))\n\nd2 <- data.frame(\n    label = rep(tr$tip.label, 5),\n    category = rep(LETTERS[1:5], each=10),\n    value = rnorm(50, 0, 3)) \n\ng <- ggtree(tr) + geom_tiplab(align=TRUE)\n\np1 <- ggplot(d1, aes(label, value)) + geom_col(aes(fill=label)) + \n    geom_text(aes(label=label, y= value+.1)) +\n    coord_flip() + theme_tree2() + theme(legend.position='none')\n \np2 <- ggplot(d2, aes(x=category, y=label)) + \n    geom_tile(aes(fill=value)) + scale_fill_viridis_c() + \n    theme_tree2() \n    \ncowplot::plot_grid(g, p2, p1, ncol=3) \n\nlibrary(aplot)\np2 %>% insert_left(g) %>% insert_right(p1, width=.5) "},{"path":"r-vis.html","id":"图片注释","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.18 图片注释","text":"没能找到图片下载地址，看代码很容易理解：","code":"\nlibrary(ggimage)\nlibrary(ggtree)\n\nnwk <- \"((((bufonidae, dendrobatidae), ceratophryidae), (centrolenidae, leptodactylidae)), hylidae);\"\n\nx = read.tree(text = nwk)\nggtree(x) + xlim(NA, 7) + ylim(NA, 6.2) +\n  geom_tiplab(aes(image=paste0(\"img/frogs/\", label, '.jpg')), \n              geom=\"image\", offset=2, align=2, size=.2)  + \n  geom_tiplab(geom='label', offset=1, hjust=.5) + \n  geom_image(x=.8, y=5.5, image=\"img/frogs/frog.jpg\", size=.2)"},{"path":"r-vis.html","id":"图标剪影注释","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.19 图标（剪影）注释","text":"PhyloPic提供了1300余种生物剪影，ggtree能够调用这个数据库中的生物图标进行注释，相当于上面的图片。这种情况下绘图稍微有点慢，毕竟这个数据库是国外的。","code":"\nlibrary(ggtree)\nnewick <- \"((Pongo_abelii,(Gorilla_gorilla_gorilla,(Pan_paniscus,Pan_troglodytes)Pan,Homo_sapiens)Homininae)Hominidae,Nomascus_leucogenys)Hominoidea;\"\n\ntree <- read.tree(text=newick)\n\nd <- ggimage::phylopic_uid(tree$tip.label)\nd$body_mass = c(52, 114, 47, 45, 58, 6)\n\np <- ggtree(tree) %<+% d + \n  geom_tiplab(aes(image=uid, colour=body_mass), geom=\"phylopic\", offset=2.5) +\n  geom_tiplab(aes(label=label), offset = .2) + xlim(NA, 7) +\n  scale_color_viridis_c()"},{"path":"r-vis.html","id":"使用子图进行注释","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.20 使用子图进行注释","text":"用子图进行注释是通过函数geom_inset()来完成的。","code":""},{},{},{},{"path":"r-vis.html","id":"phylomoji注释","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.21 Phylomoji注释","text":"","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n# install.packages('emojifont')\n\ntt = '((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));'\ntree = read.tree(text = tt)\nd <- data.frame(label = c('snail','mushroom', 'sunflower',\n                          'evergreen_tree','leaves', 'green_salad'),\n                group = c('animal', 'fungi', 'flowering plant',\n                          'conifers', 'ferns', 'mosses'))\n\nggtree(tree, linetype = \"dashed\", size=1, color='firebrick') %<+% d + \n  xlim(0, 4.5) + ylim(0.5, 6.5) +\n  geom_tiplab(parse=\"emoji\", size=15, vjust=.25) +\n  geom_tiplab(aes(label = group), geom=\"label\", x=3.5, hjust=.5)"},{"path":"r-vis.html","id":"emoji注释circularfan树","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.22 Emoji注释circular/fan树","text":"","code":"\np <- ggtree(tree, layout = \"circular\", size=1) +  \n  geom_tiplab(parse=\"emoji\", size=10, vjust=.25)\nprint(p)\n\n## fan layout  \np2 <- open_tree(p, angle=200) \nprint(p2)\n\np2 %>% rotate_tree(-90)"},{"path":"r-vis.html","id":"emoji注释clades","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.23 Emoji注释clades","text":"","code":"\nset.seed(123)\ntr <- rtree(30)\n\nggtree(tr) + xlim(NA, 5.2) +\n    geom_cladelabel(node=41, label=\"chicken\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"firebrick\") +\n    geom_cladelabel(node=53, label=\"duck\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"steelblue\") +\n    geom_cladelabel(node=48, label=\"family\", parse=\"emoji\",\n                    fontsize=12, align=TRUE, colour=\"darkkhaki\")"},{"path":"r-vis.html","id":"applecoloremoji","chapter":"第 3 章 数据可视化","heading":"3.2.6.2.24 AppleColorEmoji","text":"","code":"\nlibrary(ggtree)\ntree_text <- \"(((((cow, (whale, dolphin)), (pig2, boar)), camel), fish), seedling);\"\nx <- read.tree(text=tree_text)\nlibrary(ggimage)\nlibrary(gridSVG)\np <-  ggtree(x, size=2) + geom_tiplab(size=20, parse='emoji') +\n    xlim(NA, 7) + ylim(NA, 8.5) +\n    geom_phylopic(image=\"79ad5f09-cf21-4c89-8e7d-0c82a00ce728\",\n                  color=\"firebrick\", alpha = .3, size=Inf)\n\np\nps = grid.export(\"emoji.svg\", addClass=T)"},{"path":"r-vis.html","id":"ggtree可视化其他数据","chapter":"第 3 章 数据可视化","heading":"3.2.7 ggtree可视化其他数据","text":"ggtree支持其他的数据类型，比如树状图（更多格式请移步Y叔博客）：","code":"\nhc <- hclust(dist(mtcars))\nhc\nclus <- cutree(hc, 4)\ng <- split(names(clus), clus)\n\np <- ggtree(hc, linetype='dashed')\nclades <- sapply(g, function(n) MRCA(p, n))\n\np <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)\n\nd <- data.frame(label = names(clus), \n                cyl = mtcars[names(clus), \"cyl\"])\n\np %<+% d + \n  layout_dendrogram() + \n  geom_tippoint(size=5, shape=21, aes(fill=factor(cyl), x=x+.5), color='black') + \n  geom_tiplab(aes(label=cyl), size=3, hjust=.5, color='black') +\n  geom_tiplab(angle=90, hjust=1, offset=-10, show.legend=F) + \n  scale_color_brewer(palette='Set1', breaks=1:4) +\n  theme_dendrogram(plot.margin=margin(6,6,80,6)) +\n  theme(legend.position=c(.9, .6))"},{"path":"r-vis.html","id":"ggtree拓展ggtreeextra","chapter":"第 3 章 数据可视化","heading":"3.2.8 ggtree拓展ggtreeExtra","text":"ggtreeExtra真的是惊艳到我了，只能献出我的膝盖啊！ggtree的函数geom_facet()只支持rectangular、 roundrect、 ellipse 及 slanted 这4种输出样式，并不支持在circular、fan及radial这几种输出样式的外环上添加图层，为了解决这个问题，Y叔团队开发了新的R包：ggtreeExtra！","code":""},{"path":"r-vis.html","id":"添加微生物组丰度","chapter":"第 3 章 数据可视化","heading":"3.2.8.1 添加微生物组丰度","text":"ggtree直接支持phyloseq对象，这个对做微生物的来说，简直就是福音啊！","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(phyloseq)\nlibrary(dplyr)\n\ndata(\"GlobalPatterns\")\nGP <- GlobalPatterns\nGP <- prune_taxa(taxa_sums(GP) > 600, GP)\nsample_data(GP)$human <- get_variable(GP, \"SampleType\") %in%\n                              c(\"Feces\", \"Skin\")\nmergedGP <- merge_samples(GP, \"SampleType\")\nmergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)\nmergedGP <- tax_glom(mergedGP,\"Order\")\n\nmelt_simple <- psmelt(mergedGP) %>%\n               filter(Abundance < 120) %>%\n               select(OTU, val=Abundance)\n\np <- ggtree(mergedGP, layout=\"fan\", open.angle=10) + \n     geom_tippoint(mapping=aes(color=Phylum), \n                   size=1.5,\n                   show.legend=FALSE)\np <- rotate_tree(p, -90)\n\np <- p +\n     geom_fruit(\n         data=melt_simple,\n         geom=geom_boxplot,\n         mapping = aes(\n                     y=OTU,\n                     x=val,\n                     group=label,\n                     fill=Phylum,\n                   ),\n         size=.2,\n         outlier.size=0.5,\n         outlier.stroke=0.08,\n         outlier.shape=21,\n         axis.params=list(\n                         axis       = \"x\",\n                         text.size  = 1.8,\n                         hjust      = 1,\n                         vjust      = 0.5,\n                         nbreak     = 3,\n                     ),\n         grid.params=list()\n     ) \n     \np <- p +\n     scale_fill_discrete(\n         name=\"Phyla\",\n         guide=guide_legend(keywidth=0.8, keyheight=0.8, ncol=1)\n     ) +\n     theme(\n         legend.title=element_text(size=9), # The title of legend \n         legend.text=element_text(size=7) # The label text of legend, the sizes should be adjust with dpi.\n     )\np"},{"path":"r-vis.html","id":"多维数据添加多个图层","chapter":"第 3 章 数据可视化","heading":"3.2.8.2 多维数据添加多个图层","text":"另外一种输出方式：","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(ggstar)\nlibrary(ggplot2)\nlibrary(ggnewscale)\n\ntree <- read.tree(\"data/HMP_tree/hmptree.nwk\")\n# the abundance and types of microbes\ndat1 <- read.csv(\"data/HMP_tree/tippoint_attr.csv\")\n# the abundance of microbes at different body sites.\ndat2 <- read.csv(\"data/HMP_tree/ringheatmap_attr.csv\")\n# the abundance of microbes at the body sites of greatest prevalence.\ndat3 <- read.csv(\"data/HMP_tree/barplot_attr.csv\")\n\n# adjust the order\ndat2$Sites <- factor(dat2$Sites, levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                                          \"Plaque (prevalence)\",\"Tongue (prevalence)\",\n                                          \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                                          \"Skin (prevalence)\"))\ndat3$Sites <- factor(dat3$Sites, levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                                          \"Plaque (prevalence)\", \"Tongue (prevalence)\",\n                                          \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                                          \"Skin (prevalence)\"))\n# extract the clade label information. Because some nodes of tree are annotated to genera,\n# which can be displayed with high light using ggtree.\nnodeids <- nodeid(tree, tree$node.label[nchar(tree$node.label)>4])\nnodedf <- data.frame(node=nodeids)\nnodelab <- gsub(\"[\\\\.0-9]\", \"\", tree$node.label[nchar(tree$node.label)>4])\n# The layers of clade and hightlight\nposlist <- c(1.6, 1.4, 1.6, 0.8, 0.1, 0.25, 1.6, 1.6, 1.2, 0.4,\n             1.2, 1.8, 0.3, 0.8, 0.4, 0.3, 0.4, 0.4, 0.4, 0.6,\n             0.3, 0.4, 0.3)\nlabdf <- data.frame(node=nodeids, label=nodelab, pos=poslist)\n\n# The circular layout tree.\np <- ggtree(tree, layout=\"fan\", size=0.15, open.angle=5) +\n     geom_hilight(data=nodedf, mapping=aes(node=node),\n                  extendto=6.8, alpha=0.3, fill=\"grey\", color=\"grey50\",\n                  size=0.05) +\n     geom_cladelab(data=labdf, \n                   mapping=aes(node=node, \n                               label=label,\n                               offset.text=pos),\n                   hjust=0.5,\n                   angle=\"auto\",\n                   barsize=NA,\n                   horizontal=FALSE, \n                   fontsize=1.4,\n                   fontface=\"italic\"\n                   )\n\np <- p %<+% dat1 + geom_star(\n                        mapping=aes(fill=Phylum, starshape=Type, size=Size),\n                        position=\"identity\",starstroke=0.1) +\n         scale_fill_manual(values=c(\"#FFC125\",\"#87CEFA\",\"#7B68EE\",\"#808080\",\"#800080\",\n                                    \"#9ACD32\",\"#D15FEE\",\"#FFC0CB\",\"#EE6A50\",\"#8DEEEE\",\n                                    \"#006400\",\"#800000\",\"#B0171F\",\"#191970\"),\n                           guide=guide_legend(keywidth = 0.5, keyheight = 0.5, order=1,\n                                              override.aes=list(starshape=15)),\n                           na.translate=FALSE)+\n         scale_starshape_manual(values=c(15, 1),\n                                guide=guide_legend(keywidth = 0.5, keyheight = 0.5, order=2),\n                                na.translate=FALSE)+\n         scale_size_continuous(range = c(1, 2.5),\n                               guide = guide_legend(keywidth = 0.5, keyheight = 0.5, order=3,\n                                                    override.aes=list(starshape=15)))\n                                                    \np <- p + new_scale_fill() +\n         geom_fruit(data=dat2, geom=geom_tile,\n                    mapping=aes(y=ID, x=Sites, alpha=Abundance, fill=Sites),\n                    color = \"grey50\", offset = 0.04,size = 0.02)+\n         scale_alpha_continuous(range=c(0, 1),\n                             guide=guide_legend(keywidth = 0.3, keyheight = 0.3, order=5)) +\n         geom_fruit(data=dat3, geom=geom_bar,\n                    mapping=aes(y=ID, x=HigherAbundance, fill=Sites),\n                    pwidth=0.38, \n                    orientation=\"y\", \n                    stat=\"identity\",\n         ) +\n         scale_fill_manual(values=c(\"#0000FF\",\"#FFA500\",\"#FF0000\",\"#800000\",\n                                    \"#006400\",\"#800080\",\"#696969\"),\n                           guide=guide_legend(keywidth = 0.3, keyheight = 0.3, order=4))+\n         geom_treescale(fontsize=2, linesize=0.3, x=4.9, y=0.1) +\n         theme(legend.position=c(0.93, 0.5),\n               legend.background=element_rect(fill=NA),\n               legend.title=element_text(size=6.5),\n               legend.text=element_text(size=4.5),\n               legend.spacing.y = unit(0.02, \"cm\"),\n             )\np\np + layout_rectangular() + \n    theme(legend.position=c(.05, .7))"},{"path":"r-vis.html","id":"群体遗学传例子","chapter":"第 3 章 数据可视化","heading":"3.2.9 群体遗学传例子","text":"","code":"\nlibrary(ggtree)\nlibrary(ggtreeExtra)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(dplyr)\nlibrary(tidytree)\nlibrary(ggstar)\n\ndat <- read.csv(\"data/microreact/Candida_auris/microreact-project-Candidaauris-data.csv\")\ntr <- read.tree(\"data/microreact/Candida_auris/microreact-project-Candidaauris-tree.nwk\")\n\ncountries <- c(\"Canada\", \"United States\",\n               \"Colombia\", \"Panama\",\n               \"Venezuela\", \"France\",\n               \"Germany\", \"Spain\",\n               \"UK\", \"India\",\n               \"Israel\", \"Pakistan\",\n               \"Saudi Arabia\", \"United Arab Emirates\",\n               \"Kenya\", \"South Africa\",\n               \"Japan\", \"South Korea\",\n               \"Australia\")\n# For the tip points\ndat1 <- dat %>% select(c(\"ID\", \"COUNTRY\", \"COUNTRY__colour\"))\ndat1$COUNTRY <- factor(dat1$COUNTRY, levels=countries)\nCOUNTRYcolors <- dat1[match(countries,dat$COUNTRY),\"COUNTRY__colour\"]\n\n# For the heatmap layer\ndat2 <- dat %>% select(c(\"ID\", \"FCZ\", \"AMB\", \"MCF\"))\ndat2 <- reshape2::melt(dat2,id=\"ID\", variable.name=\"Antifungal\", value.name=\"type\")\ndat2$type <- paste(dat2$Antifungal, dat2$type)\ndat2$type <- unlist(lapply(dat2$type,\n                           function(x)ifelse(grepl(\"Not_\", x), \"Susceptible\", x)))\ndat2$Antifungal <- factor(dat2$Antifungal, levels=c(\"FCZ\", \"AMB\", \"MCF\"))\ndat2$type <- factor(dat2$type,\n                    levels=c(\"FCZ Resistant\",\n                            \"AMB Resistant\",\n                            \"MCF Resistant\",\n                            \"Susceptible\"))\n\n# For the points layer\ndat3 <- dat %>% select(c(\"ID\", \"ERG11\", \"FKS1\")) %>%\n        reshape2::melt(id=\"ID\", variable.name=\"point\", value.name=\"mutation\")\ndat3$mutation <- paste(dat3$point, dat3$mutation)\ndat3$mutation <- unlist(lapply(dat3$mutation, function(x)ifelse(grepl(\"WT\",x), NA,x)))\ndat3$mutation <- factor(dat3$mutation, levels=c(\"ERG11 Y132F\", \"ERG11 K143R\",\n                                                \"ERG11 F126L\", \"FKS1 S639Y/P/F\"))\n\n# For the clade group\ndat4 <- dat %>% select(c(\"ID\", \"CLADE\"))\ndat4 <- aggregate(.~CLADE, dat4, FUN=paste, collapse=\",\")\nclades <- lapply(dat4$ID, function(x){unlist(strsplit(x,split=\",\"))})\nnames(clades) <- dat4$CLADE\n\ntr <- groupOTU(tr, clades, \"Clade\")\nClade <- NULL\np <- ggtree(tr=tr, layout=\"fan\", open.angle=15, size=0.2, aes(colour=Clade)) +\n     scale_colour_manual(\n         values=c(\"black\",\"#69B920\",\"#9C2E88\",\"#F74B00\",\"#60C3DB\"),\n         labels=c(\"\",\"I\", \"II\", \"III\", \"IV\"),\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=1,\n                            override.aes=list(linetype=c(\"0\"=NA,\n                                                         \"Clade1\"=1,\n                                                         \"Clade2\"=1,\n                                                         \"Clade3\"=1,\n                                                         \"Clade4\"=1\n                                                        )\n                                             )\n                           )\n     ) + \n     new_scale_colour()\n\np1 <- p %<+% dat1 +\n     geom_tippoint(aes(colour=COUNTRY),\n                   alpha=0) +\n     geom_tiplab(aes(colour=COUNTRY),\n                   align=TRUE,\n                   linetype=3,\n                   size=1,\n                   linesize=0.2,\n                   show.legend=FALSE\n                   ) +\n     scale_colour_manual(\n         name=\"Country labels\",\n         values=COUNTRYcolors,\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=2,\n                            override.aes=list(size=2,alpha=1))\n     )\n\np2 <- p1 +\n      geom_fruit(\n          data=dat2,\n          geom=geom_tile,\n          mapping=aes(x=Antifungal, y=ID, fill=type),\n          width=0.1,\n          color=\"white\",\n          pwidth=0.1,\n          offset=0.15\n      ) +\n      scale_fill_manual(\n           name=\"Antifungal susceptibility\",\n           values=c(\"#595959\", \"#B30000\", \"#020099\", \"#E6E6E6\"),\n           na.translate=FALSE,\n           guide=guide_legend(keywidth=0.5,\n                              keyheight=0.5,\n                              order=3\n                             )\n      ) +\n      new_scale_fill()\n\np3 <- p2 +\n      geom_fruit(\n          data=dat3,\n          geom=geom_star,\n          mapping=aes(x=mutation, y=ID, fill=mutation, starshape=point),\n          size=1,\n          starstroke=0,\n          pwidth=0.1,\n          inherit.aes = FALSE,\n          grid.params=list(\n                          linetype=3,\n                          size=0.2\n                      )\n\n      ) +\n      scale_fill_manual(\n          name=\"Point mutations\",\n          values=c(\"#329901\", \"#0600FF\", \"#FF0100\", \"#9900CC\"),\n          guide=guide_legend(keywidth=0.5, keyheight=0.5, order=4,\n                             override.aes=list(starshape=c(\"ERG11 Y132F\"=15,\n                                                           \"ERG11 K143R\"=15,\n                                                           \"ERG11 F126L\"=15,\n                                                           \"FKS1 S639Y/P/F\"=1),\n                                               size=2)\n                            ),\n          na.translate=FALSE,\n      ) +\n      scale_starshape_manual(\n          values=c(15, 1),\n          guide=\"none\"\n      ) +\n      theme(\n          legend.background=element_rect(fill=NA),\n          legend.title=element_text(size=7), # The size should be adjusted with different devout.\n          legend.text=element_text(size=5.5),\n          legend.spacing.y = unit(0.02, \"cm\")\n      )\np3\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(dplyr)\nlibrary(ggstar)\n\ntr <- read.tree(\"data/microreact/Salmonella_Typhi/microreact-project-NJIDqgsS-tree.nwk\")\n\nmetada <- read.csv(\"data/microreact/Salmonella_Typhi/microreact-project-NJIDqgsS-data.csv\")\n\nmetadata <- metada %>%\n            select(c(\"id\", \"country\", \"country__colour\", \"year\", \"year__colour\", \"haplotype\"))\nmetadata$haplotype <- unlist(lapply(metadata$haplotype, function(x)ifelse(nchar(x)>0,x,NA)))\n\ncountrycolors <- metada %>%\n                 select(c(\"country\", \"country__colour\")) %>%\n                 distinct()\n\nyearcolors <- metada %>%\n              select(c(\"year\", \"year__colour\")) %>%\n              distinct()\nyearcolors <- yearcolors[order(yearcolors$year, decreasing=TRUE),]\n\nmetadata$country <- factor(metadata$country, levels=countrycolors$country)\nmetadata$year <- factor(metadata$year, levels=yearcolors$year)\n\np <- ggtree(tr, layout=\"fan\", open.angle=15, size=0.1)\n\np <- p %<+% metadata\n\np1 <-p +\n     geom_tippoint(\n         mapping=aes(colour=country),\n         size=1.5,\n         stroke=0,\n         alpha=0.4\n     ) +\n     scale_colour_manual(\n         name=\"Country\",\n         values=countrycolors$country__colour,\n         guide=guide_legend(keywidth=0.3,\n                            keyheight=0.3,\n                            ncol=2,\n                            override.aes=list(size=2,alpha=1),\n                            order=1)\n     ) +\n     theme(\n         legend.title=element_text(size=5),\n         legend.text=element_text(size=4),\n         legend.spacing.y = unit(0.02, \"cm\")\n     )\n\np2 <-p1 +\n     geom_fruit(\n         geom=geom_star,\n         mapping=aes(fill=haplotype),\n         starshape=26,\n         color=NA,\n         size=2,\n         starstroke=0,\n         offset=0,\n     ) +\n     scale_fill_manual(\n         name=\"Haplotype\",\n         values=c(\"red\"),\n         guide=guide_legend(\n                   keywidth=0.3,\n                   keyheight=0.3,\n                   order=3\n               ),\n         na.translate=FALSE\n     )\n\np3 <-p2 +\n     new_scale_fill() +\n     geom_fruit(\n         geom=geom_tile,\n         mapping=aes(fill=year),\n         width=0.002,\n         offset=0.1\n     ) +\n     scale_fill_manual(\n         name=\"Year\",\n         values=yearcolors$year__colour,\n         guide=guide_legend(keywidth=0.3, keyheight=0.3, ncol=2, order=2)\n     ) +\n     theme(\n           legend.title=element_text(size=6), # The size should be adjusted with the different devout.\n           legend.text=element_text(size=4.5),\n           legend.spacing.y = unit(0.02, \"cm\")\n           )\np3"},{"path":"r-deve.html","id":"r-deve","chapter":"第 4 章 R语言开发","heading":"第 4 章 R语言开发","text":"","code":""},{"path":"r-deve.html","id":"一些资源","chapter":"第 4 章 R语言开发","heading":"4.0.1 一些资源","text":"Building R packages devtools usethis | RStudioUsing RMarkdown Create Reproducible Documents (Oct 26, 2021) Presenter: Mine Çetinkaya-Rundel","code":""},{"path":"r-deve.html","id":"一些tips","chapter":"第 4 章 R语言开发","heading":"4.1 一些Tips","text":"将数据框作为提示信息进行输出：Linux指定R镜像，加速下载安装：","code":"\ndesign.demo = data.frame(N = 1:12,\n                        Treatment = rep(c(\"CK\", \"T1\", \"T2\"),each  =4),\n                        Gene = rep(c(\"gene1\", \"gene2\", \"gene3\", \"gene4\"), 3))\n\nstop(paste(c(\"Design matrix should be input! Like...\",\n             capture.output(print(design.demo, row.names = FALSE))),\n           collapse = \"\\n\"))\noptions (repos=structure (c (CRAN=\"https://mirrors.tuna.tsinghua.edu.cn/CRAN/\")))\noptions (BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\")"},{"path":"r-deve.html","id":"pac4xiang","chapter":"第 4 章 R语言开发","heading":"4.2 R包pac4xiang的使用","text":"pac4xiang这个R包是我自己开发的，包含了一些我自己常用的函数。包目前在GitHub上，更多功能还在完善中，待进一步开发。","code":""},{"path":"r-deve.html","id":"安装","chapter":"第 4 章 R语言开发","heading":"4.2.1 安装","text":"在R中运行下面的代码安装pac4xiang。","code":"\ndevtools::install_github('https://github.com/lixiang117423/pac4xiang')"},{"path":"r-deve.html","id":"使用方法","chapter":"第 4 章 R语言开发","heading":"4.2.2 使用方法","text":"","code":""},{"path":"r-deve.html","id":"calstandcurve","chapter":"第 4 章 R语言开发","heading":"4.2.2.1 calStandCurve","text":"该函数用与计算相对定量qPCR的标曲。qPCR标曲点样参照图4.1。按照我的思路和习惯，我会准备8个浓度梯度的cDNA,从高到低分别是C0到C8。C0是对应批次下多有样品cDNA的组合，然后再以一定的稀释倍数稀释得到C1，C1再以同样的倍数稀释得到C2，依此类推，直到得到C8。\n图4.1: qPCR标曲点样示意图\n函数具体怎么用呢？参考下方的代码：其中基因的数量和技术重复的数量乘起来必须是12；基因的顺序必须是从左到右的；输入稀释倍数后告诉程序后续的标曲建立如何取相应的对数；start表示从第几行开始计算，如start = 2表示的是从B行开始计算标曲；对应的end = 6表示的是到第6行，也就是F行结束，也就意味着第一行和最后两行其实是不用的。默认是保存标曲的图片的，如果不需要保存图片加上save.fig = FALSE即可，默认的图片格式是pdf格式，可以自定义。\n图4.2: 函数calStandCurve返回的数据框\n返回的结果是个数据框（参考图4.2），包含了基因名称、标曲公式、斜率、截距、R\\(^2\\)、P值、该标曲适用的自变量范围（最大值和最小值）及计算标曲的日期等。保存的图片默认存在当前工作目录下（运行getcwd()查看当前R语言工作目录）。","code":"\ndf.1 <- calStandCurve(\n  data = \"20210927下机数据/20210928lx_1.txt\"NA= c(\"OsPOX223\", \"OsAPX1\", \"OsAPX2\", \"OsPAL\"),\n  rep = 3,\n  dilution = 4,\n  start = 2,\n  end = 6,\n  drop.NA = TRUE,\n  fig.type = \"pdf\"\n)"},{"path":"r-deve.html","id":"calrtqpcr","chapter":"第 4 章 R语言开发","heading":"4.2.2.2 calRTqPCR","text":"该函数在calStandCurve函数返回的标曲结果的基础上可以计算不同处理下各基因的表达情况。样品的点样方法参考图4.3。\n图4.3: qPCR标曲点样示意图\n计算表达量的代码如下：其中的data就的样品的下机导出数据，StandCurve是函数calStandCurve返回的数据框，gene需要严格控制大小写，必须和输入函数calStandCurve的基因名称一样，treatment是指定从左到右的处理分别是什么，这个是为了后续方便进行t检验。","code":"\nexp.1 <- calRTqPCR(\n  data = \"20210927下机数据/20210929lx_1.txt\"NA= df.1,\n  genes = c(\"OsPOX223\", \"OsAPX1\", \"OsAPX2\", \"OsPAL\"),\n  treatment = c(\"CK\", \"Inter\", \"Infect\")\n)"},{"path":"r-deve.html","id":"getalignresults","chapter":"第 4 章 R语言开发","heading":"4.2.2.3 getAlignResults","text":"该函数可以将软件CLUSTALW的输出文件变成.fasta格式的比对结果。\n写这个函数的原因在于每次我用MEGA进行序列比对构建进化树的时候都报错，不是字符串有问题就是长度不对，索性直接用Linux系统下的CLUSTALW进行序列比对，然后用MEGA构建进化树，百试不爽！运行完成后会在当前目录下生成一个YourAlignResults.fasta文件，就是fasta格式的比对文件，然后就可以用来构建进化树了。mult.aov\n该函数用于多分组数据进行方差分析。mult.aov\n该函数用于多分组数据进行方差分析。multGroupTtest\n该函数用于进行多分组的t检验。\n这个函数是用于进行多组t检验的。比如每次跑qPCR，会有多个处理多个目的基因，这个时候就需要关注每个目的基因在不同的处理中的表达量。用法参考下方代码：multGroupTtest\n该函数用于进行多分组的t检验。\n这个函数是用于进行多组t检验的。比如每次跑qPCR，会有多个处理多个目的基因，这个时候就需要关注每个目的基因在不同的处理中的表达量。用法参考下方代码：","code":"\nmy.aln = getAlignResults(aln = 'test.aln')\nt.test <- multGroupTtest(\n  data = exp.all.final,\n  group1 = \"Gene\",\n  group2 = \"Treatment\",\n  CK = \"CK\",\n  value = \"Expression\",\n  level = 0.95\n)"},{"path":"r-deve.html","id":"plot96well","chapter":"第 4 章 R语言开发","heading":"4.2.2.4 plot96well","text":"该函数用于可视化Roche96孔板的Cq值。","code":"\nplot96well(data = \"20210927下机数据/20210928lx_1.txt\"NA)NA"},{"path":"r-deve.html","id":"plotciselement","chapter":"第 4 章 R语言开发","heading":"4.2.2.5 plotCisElement","text":"该函数用与可视化基因启动子上的顺式作用元件。需要输入的参数有三个：","code":""},{"path":"r-deve.html","id":"dataplantcare返回的文件","chapter":"第 4 章 R语言开发","heading":"4.2.2.6 data：plantCARE返回的文件；","text":"","code":""},{"path":"r-deve.html","id":"length启动子长度","chapter":"第 4 章 R语言开发","heading":"4.2.2.7 length：启动子长度；","text":"","code":""},{"path":"r-deve.html","id":"cis需要展示哪些顺式作用元件","chapter":"第 4 章 R语言开发","heading":"4.2.2.8 Cis：需要展示哪些顺式作用元件。","text":"","code":""},{"path":"r-deve.html","id":"plotgenestructure","chapter":"第 4 章 R语言开发","heading":"4.2.2.9 plotGeneStructure","text":"该函数用于可视化基因结构。输入文件为.gtf文件。\n如果同时输入对应的进化树文件，那么就会按照进化树的顺序对基因名称进行排序，可以和ggtree进行联用。","code":""},{"path":"r-deve.html","id":"fasta2df","chapter":"第 4 章 R语言开发","heading":"4.2.2.10 fasta2df","text":"这个函数主要是为了将fasta格式转换成R中常见的data.frame格式。使用很简单，输入fasta格式即可。","code":""},{"path":"r-deve.html","id":"df2fasta","chapter":"第 4 章 R语言开发","heading":"4.2.2.11 df2fasta","text":"这个函数主要是将data.frame格式的序列文件转换成fasta格式。","code":""},{"path":"r-deve.html","id":"ggmotif","chapter":"第 4 章 R语言开发","heading":"4.3 R包ggmotif的使用方法","text":"激发我开发这个R包的原因是在许做基因家族分析中的motif分析的时候总是找不到趁手的工具去可视化相关的结果，要么是在线网站，要么是别人开发的工具，网页版工具怕哪天就跑路了，别人的工具想要个性化比较困难。那，就自己写一个吧。R包下载安装：meme输出的结果主要是XML格式和txt格式的文件，需要的结果就在这两个文件里面。","code":"\ninstall.packages(\"ggmotif\")\n\n# 或者NAdevtools::install_github(\"lixiang117423/ggmotif\")"},{"path":"r-deve.html","id":"从xml文件提取结果并绘图","chapter":"第 4 章 R语言开发","heading":"4.3.1 从XML文件提取结果并绘图","text":"motif在序列上的位置结果存放在XML格式的文件中，运行下面的代码便可以将结果转换成数据框格式并进行可视化。","code":"\nfilepath <- system.file(\"examples\", \"meme.xml\", package=\"ggmotif\")\nmotif_extract <- getMotifFromXML(XMLfile = filepath)\nmotif_plot <- motif_location(data = motif_extract)\nmotif_plot"},{"path":"r-deve.html","id":"从txt文件提取结果并进行可视化","chapter":"第 4 章 R语言开发","heading":"4.3.2 从txt文件提取结果并进行可视化","text":"每个motif的序列是存放在txt文件中的，运行下方的代码便能结果转换成数据框格式并进行绘图。","code":"\nlibrary(tidyverse)\n\nfilepath <- system.file(\"examples\", \"meme.txt\", package = \"ggmotif\")\nmotif_extract <- getMotifFromTxt(data = filepath)\n\nmotif_extract %>% \n  dplyr::filter(motif.num == 'Motif.1') %>% \n  dplyr::select(input.seq.motif) %>% \n  ggseqlogo::ggseqlogo() +\n  theme_classic()"},{"path":"r-deve.html","id":"与ggtree联用","chapter":"第 4 章 R语言开发","heading":"4.3.3 与ggtree联用","text":"有时候会对序列构建进化树展示进化关系，ggmotif中的函数能够以输入的进化树文件为基础，把输出的motif在序列上的位置与进化树上的位置进行匹配，便能够与ggtree联用在一个图上展示进化树和motif在序列上的位置。","code":"\nfilepath <- system.file(\"examples\", \"meme.xml\", package=\"ggmotif\")\ntreepath <- system.file(\"examples\", \"tree.nwk\", package=\"ggmotif\")\nmotif_extract <- getMotifFromXML(XMLfile = filepath)\nmotif_plot_with_tree <- motif_with_tree(data = motif_extract, tree = treepath)\n\np.tree = ape::read.tree(treepath) %>% \n  ggtree::ggtree() +\n  ggtree::geom_tiplab()\n\np.tree  %>% \n  aplot::insert_right(motif_plot_with_tree, width = 0.8)"},{"path":"r-deve.html","id":"r-shiny开发","chapter":"第 4 章 R语言开发","heading":"4.4 R shiny开发","text":"","code":""},{"path":"r-deve.html","id":"css学习网站","chapter":"第 4 章 R语言开发","heading":"4.4.1 CSS学习网站","text":"CSS菜鸟教程。CSS在Rshiny中的使用。","code":""},{"path":"r-deve.html","id":"服务器搭建rshiny-server","chapter":"第 4 章 R语言开发","heading":"4.4.2 服务器搭建Rshiny-server","text":"安装shiny-server的时候参考官方最新的指导页面，点击访问。日志所在目录为：/var/log/shiny-server。需要修改配置文件，保证记录运行日志，否则可能找不到报错提示。软件所在目录为：/srv/shiny-server安装完成后在浏览器输入IP:3838就能访问到示例界面了。默认的端口是3838端口，需要其他端口的需要自行调整。基本管理：","code":"#root 权限进入\nsudo su\nuseradd shiny # 添加shiny用户\npasswd shiny # 修改shiny用户的密码\n\nchmod +w /etc/sudoers # 修改权限\nsudo vim /etc/sudoers # 编辑\n# root ALL=(ALL) ALL 该行，在下面添加 shiny ALL=(ALL:ALL) ALL\nchmod -w /etc/sudoers # 收回权限\n\nsu - shiny # 切换到shiny用户\n\n# 安装R\nsudo apt-get update\nsudo apt-get install r-base\n\n# 安装shiny包\nsudo su -c \"R -e \\\"install.packages('shiny',repos='https://cran.rstudio.com/')\\\"\"\n\n# 安装shiny server\nsudo apt-get install gdebi-core\nwget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.17.973-amd64.deb\nsudo gdebi shiny-server-1.5.17.973-amd64.debvi /etc/shiny-server/shiny-server.conf\npreserve_logs true; # 在最上面添加这行## 重启\nsudo systemctl restart shiny-server\n##查看状态 \nsudo systemctl status shiny-server \n##开启 \nsudo systemctl start shiny-server \n##停止 \nsudo systemctl stop shiny-server "},{"path":"r-deve.html","id":"ubuntu安装devtools","chapter":"第 4 章 R语言开发","heading":"4.4.3 Ubuntu安装devtools","text":"最重要的是上面这一步，剩下的差啥装啥就OK。安装proj这个包：按照依赖库：","code":"sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-devvsudo apt-get install libproj-dev\n\ninstall.packages(\"RcppEigen\", INSTALL_opts = '--no-lock')wget ftp://xmlsoft.org/libxml2/libxml2-2.9.2.tar.gz\ntar -xvf libxml2-2.9.2.tar.gz\ncd libxml2-2.9.2\n./configure --prefix=/usr --disable-static --with-history && make\nsudo make install"},{"path":"r-deve.html","id":"上传文件大小限制","chapter":"第 4 章 R语言开发","heading":"4.4.4 上传文件大小限制","text":"","code":"\noptions(shiny.maxRequestSize=1000*1024^2)"},{"path":"r-deve.html","id":"美化rshiny","chapter":"第 4 章 R语言开发","heading":"4.5 美化RShiny","text":"","code":""},{"path":"r-deve.html","id":"htmltools包的使用","chapter":"第 4 章 R语言开发","heading":"4.5.1 htmltools包的使用","text":"查看HTML下的所有tags：在R里面使用tags的两种方法：含有大量tags时候的写法：如何定义新的tag：将HTML代码转换成R代码：https://github.com/alandipert/html2r如何玩转R里面的tag：如何修改子tag的class：管理CSS的三种方式：External CSS file tags$link(rel = \"stylesheet\", type=\"text/css\", href=\"www/style.css\").Internal CSS tags$head(tags$style(\"p {color: red;}\")).Inline CSS p(style = \"color:red;\", \"Red text\").CSS选择器：多个选择器：通过class和id进行选择：如何改变某个字的属性呢？class一致的时候怎么选择：先选择tag","code":"\nlibrary(htmltools)\ntag <- div(\"Hello World\")\ntaghtmltools::tags$\n# good\nh1(\"This is a title\")\n\n# correct but not necessary\ntags$h1(\"This is a title\")\n# Better\nwithTags(\n  nav(div(), ul(li(), li()))\n)\n\n# instead of \ntags$nav(div(), tags$ul(tags$li(), tags$li()))\n\n# good\ntag_list_1 <- tagList(\n  p(\"Some text\"),\n  div(\"Content\")\n)\n\nstr(tag_list_1)\ncustomTag <- tag(\n  \"test\", \n  list(class = \"test\", p(\"Custom Tag\"))\n)\nstr(customTag)\n# create the tag\nmyTag <- div(\n  class = \"divclass\", \n  id = \"first\",\n  h1(\"My first child!\"),\n  span(class = \"child\", id = \"baby\", \"Crying\")\n)\n# access its name\n# myTag$name\n# access its attributes (id and class)\n# myTag$attribs\n# access children (returns a list of 2 elements)\n# myTag$children\n# access its class\nstr(myTag)\nmyTag$children[[2]]$attribs$class <- \"adult\"\nmyTagselector {\n  property: value;\n}\n\n# 如\np {\n  color: red;  \n}p, div {\n  color: red;  \n}\n\n# 如\nui <- fluidPage(\n  tags$style(\n    \"p, div {\n      color: red;\n    }\"\n  ),\n  p(\"Hello World\"),\n  div(\"A block\")\n).first-p {\n  color: red;  \n}\n\n#element {\n  color: red;\n}\n\nui <- fluidPage(\n  tags$style(\n    \".first-p {\n      color: red;\n    }\n    #element {\n      color: red;\n    }\n    \"\n  ),\n  p(class = \"first-p\", \"Hello World\"),\n  p(\"Another text\"),\n  div(id = \"element\", \"A block\")\n)<p>Hello <span class=\"custom\">World<\/span>! What's up?<\/p>\n.custom {\n  color: red;\n}<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#\">Link<\/a>\n<\/li>\n\n<a class=\"nav-link\" href=\"#\">Link<\/a>\n\nli a {\n  color: red;\n}\n### RUN ### \n# OSUICode::run_example( \n#  \"css/selector-nested/ex1\", \n#   package = \"OSUICode\" \n# ) \n\n### APP CODE ### \nlibrary(shiny)\n\nui <- navbarPage(\n  \"App Title\",\n  tabPanel(\n    \"Plot\",\n    tags$style(\n      \"li a {\n        font-size: 20px;\n        font-weight: bold;\n      }\n    \"\n    ),\n    tabsetPanel(\n      tabPanel(\"Plot\"),\n      tabPanel(\"Summary\"),\n      tabPanel(\"Table\")\n    )\n  ),\n  tabPanel(\"Summary\"),\n  tabPanel(\"Table\")\n)\n\nserver <- function(input, output) {}\n\nshinyApp(ui, server)"},{"path":"r-deve.html","id":"golem包开发产品级shiny","chapter":"第 4 章 R语言开发","heading":"4.6 golem包开发产品级Shiny","text":"golem的内核思想是每个Rshiny应用都应该是个R包。","code":""},{"path":"r-deve.html","id":"什么是产品级的shiny-app","chapter":"第 4 章 R语言开发","heading":"4.6.1 什么是产品级的shiny app","text":"有metadataapp的名字、版本、功能、报错时的联系信息等。这个部分的内容相当于R包里面的DESCRIPTIONM。没有依赖关系上的报错把整个shiny app中需要用到的包写成R包里面的DESCRIPTIONM格式，把需要用到的函数写成R包里面的NAMESPACE文件。这样就能避免各种各样的报错。整个app划分成不同的function模块避免将app的左右函数都写在一个文档里面，那就将这些function分开写，并像R包那样放在R整个文件夹内。有文档手册\nREADME文件：放在根目录下，说明如何安装这个app以及如何使用这个app。\nVignettes：一个比README文件更长的文档，从细节上说明如何使用这个app。\n函数文档：和写R包一样，app里面的每个函数都应该有对应的文档。\nREADME文件：放在根目录下，说明如何安装这个app以及如何使用这个app。Vignettes：一个比README文件更长的文档，从细节上说明如何使用这个app。函数文档：和写R包一样，app里面的每个函数都应该有对应的文档。测试运行。Nothing go production without tested. Nothing.把shiny app写成R包的构造方便进行测试，不如用testthat进行测试。","code":""},{"path":"r-deve.html","id":"如何在模块间传递数据","chapter":"第 4 章 R语言开发","heading":"4.7 如何在模块间传递数据","text":"通过reactive返回数据reactiveValues()构造全局变量创造R6对象进行传递。","code":""},{"path":"r-deve.html","id":"golem结构","chapter":"第 4 章 R语言开发","heading":"4.7.1 golem结构","text":"golem的底层概念就是每个shiny app都是个R包。创建golem对象：查看结构：DESCRIPTION含有各种metadata,比如谁写的app，版本，app目的是啥，报错应该联系谁等等。这个文件是由dev/01_start.R这个函数自动生成的。NAMESPACE这个文件是绝对不能手动编辑的！！！包含的信息有：哪个包的哪个函数被导入，哪个功能被export。如何产生这个文件呢：R文件夹用于存放核心函数。其实只要是.R结尾的文件都应该放在这个文件夹里面。那为什么在dev/这个文件夹下面还有.R结尾的文件呢？虽然是.R结尾的文件，但是他们并不是核心函数吗，只是开发过程中需要用到的信息。特别需要注意的是这个文件夹下面不能有任何子文件夹！！！","code":"\ngolem::create_golem(\"shiny4RefPlantNLR\")\nfs::dir_tree(\"shiny4RefPlantNLR\")shiny4RefPlantNLR\n+-- DESCRIPTION \n+-- dev\n|   +-- 01_start.R\n|   +-- 02_dev.R\n|   +-- 03_deploy.R\n|   \\-- run_dev.R\n+-- inst\n|   +-- app\n|   |   \\-- www\n|   |       \\-- favicon.ico\n|   \\-- golem-config.yml\n+-- man\n|   \\-- run_app.Rd\n+-- NAMESPACE\n+-- R\n|   +-- app_config.R\n|   +-- app_server.R\n|   +-- app_ui.R\n|   \\-- run_app.R\n\\-- shiny4RefPlantNLR.Rproj\ndevtools::document()\n## OR\ngolem::document_and_reload()"},{"path":"r-deve.html","id":"网页工具shiny4qpcr使用说明","chapter":"第 4 章 R语言开发","heading":"4.8 网页工具shiny4qPCR使用说明","text":"工具地址：http://106.55.94.9:3838/shiny4qPCR/","code":""},{"path":"r-deve.html","id":"反转录计算","chapter":"第 4 章 R语言开发","heading":"4.8.1 反转录计算","text":"在进行计算是只需要上传Nano Drop2000的下机数据，再选择需要反转的体积即可。计算完成后返回的数据是求均值后的数据，即对每个样品求均值，然后继续计算，组后返回结果。\nNano Drop2000的下机数据样式点击下载示例数据即可。","code":""},{"path":"r-deve.html","id":"标曲计算","chapter":"第 4 章 R语言开发","heading":"4.8.2 标曲计算","text":"浓度布局图：告诉程序每个孔里面的物质的相对浓度是多少。","code":""},{"path":"r-deve.html","id":"计算表达量标曲法","chapter":"第 4 章 R语言开发","heading":"4.8.3 计算表达量（标曲法）","text":"用标曲法计算表达量时，也只需要上传一个文件即可（下载示例数据查看样式）。四个文件分别为：\n- qPCR下机数据；\n- 处理布局图：告诉程序每个孔分别属于什么处理；基因布局图：告诉程序每个孔分别是什么基因（基因名称严格区分大小写）；基因标曲信息：前面输出的标曲信息。需要注意的地方：\n- 基因名称严格区分大小写；\n- 前三个表格的第一列必须是Batch，也就是告诉成程序你的数据属于第几批次，当有多次下机数据的时候，将多次下机数据合并在一个文件进行上传计算会方便很多。\n- 程序默认使用内参基因对表达量进行校正，可以选择不校正。如果选择用内参基因进行校正，那就需要输入内参基因名称，必须严格区分大小写。","code":""},{"path":"r-deve.html","id":"计算表达量2-deltadeltac_t法","chapter":"第 4 章 R语言开发","heading":"4.8.4 计算表达量（2\\(^{-\\delta{\\delta}C_t}\\)法）","text":"使用2\\(^{-\\delta{\\delta}C_t}\\)法计算表达量的输入数据和使用标曲法输入数据是一致的，唯一的差别在于使用2\\(^{-\\delta{\\delta}C_t}\\)法不需要标曲数据，前三个表是一样的。","code":""},{"path":"r-deve.html","id":"差异表达统计","chapter":"第 4 章 R语言开发","heading":"4.8.5 差异表达统计","text":"差异表达统计需要输入一个数据，也就是前面计算完表达量以后的数据文件。关键的有三列：\n- Treatment：是什么处理\n- Gene：是哪个基因\n- Expression：对应的表达量程序默认使用t-test进行统计检验，当有多个处理时可以选择Anova。统计检验水培默认的是0.95，可以选择0.99。\n得到的结果只算统计分析的结果，没有包含原始数据。","code":""},{"path":"python-base.html","id":"python-base","chapter":"第 5 章 Python基础","heading":"第 5 章 Python基础","text":"","code":""},{"path":"python-base.html","id":"生物序列处理","chapter":"第 5 章 Python基础","heading":"5.1 生物序列处理","text":"本章主要是关于Python的相关知识，包括Python基础知识、数据统计分析、数据可视化及人工只能等内容。","code":""},{"path":"python-base.html","id":"fasta文件处理","chapter":"第 5 章 Python基础","heading":"5.1.1 fasta文件处理","text":"处理从PlantTFDB下载的序列","code":"import os\nos.chdir(\"C://Users//Administrator//Desktop//\")\n#read txt method one\nwrky_seq = open('wrky_seq.fasta','w')\nwrky_info = open('wrky_info.txt','w')\nf = open(\"seq.fas\",'r')\nfor line in f:\n    if str.startswith(line,\">\"):\n        seq_name = str.split(line, '|')[0]\n        #seq_name = str.split(seq_name,'.')[0]\n        seq_species = str.split(line, '|')[1]\n        seq_name2 = str.replace(seq_name, \">\", \"\")\n        #print(seq_name)\n        wrky_seq.write(seq_name + \"\\n\")\n        wrky_info.write(seq_name + \"    \" + seq_name2 + \"    \" + seq_species + \"\\n\")\n    else:\n        wrky_seq.write(line)\nwrky_seq.close()\nwrky_info.close()"},{"path":"python-stat.html","id":"python-stat","chapter":"第 6 章 数据统计分析","heading":"第 6 章 数据统计分析","text":"","code":""},{"path":"python-spider.html","id":"python-spider","chapter":"第 7 章 Python爬虫","heading":"第 7 章 Python爬虫","text":"","code":""},{"path":"ai.html","id":"ai","chapter":"第 8 章 人工智能","heading":"第 8 章 人工智能","text":"","code":""},{"path":"bio-base.html","id":"bio-base","chapter":"第 9 章 基础知识","heading":"第 9 章 基础知识","text":"","code":""},{"path":"bio-base.html","id":"学习资源推荐","chapter":"第 9 章 基础知识","heading":"9.1 学习资源推荐","text":"自学生信RoadMap生物信息学瑞士军刀GrapgPad Prism官方教程","code":""},{"path":"bio-base.html","id":"常用的生物学数据库","chapter":"第 9 章 基础知识","heading":"9.2 常用的生物学数据库","text":"","code":""},{"path":"bio-base.html","id":"cath-gene3d","chapter":"第 9 章 基础知识","heading":"9.2.1 CATH-Gene3D","text":"这个数据库是蛋白质数据库，主要是蛋白结构域的进化关系。点击访问。","code":""},{"path":"bio-base.html","id":"fasttree构建进化树","chapter":"第 9 章 基础知识","heading":"9.3 FastTree构建进化树","text":"FastTree是基于最大似然法构建进化树的软件，使用简单。Windows端直接下载，完后运行即可：前面是软件名称，后面是比对好的序列文件。","code":".\\FastTree.exe .\\YourAlignResults.fasta"},{"path":"bio-env.html","id":"bio-env","chapter":"第 10 章 环境搭建","heading":"第 10 章 环境搭建","text":"","code":""},{"path":"bio-env.html","id":"WSL4Docker","chapter":"第 10 章 环境搭建","heading":"10.1 WSL安装使用Docker","text":"","code":""},{"path":"bio-env.html","id":"docker的安装","chapter":"第 10 章 环境搭建","heading":"10.1.1 Docker的安装","text":"参考的安装教程：Docker-从入门到实践。关键的代码如下：","code":"curl -fsSL test.docker.com -o get-docker.sh\ncurl -fsSL get.docker.com -o get-docker.sh\nsudo sh get-docker.sh --mirror Aliyun\nsudo sh get-docker.sh --mirror AzureChinaCloud"},{"path":"bio-env.html","id":"docker的使用","chapter":"第 10 章 环境搭建","heading":"10.1.2 Docker的使用","text":"Docker默认是需要root用户才能使用的，在Windows上我习惯于进入Powershell后执行下面的命令启动Docker：","code":"wsl --shutdown # 先关闭wsl\nwsl # 启动WSL\nsudo su # 进入root\nsudo service docker start # 启动Docker\nsu xiang # 切换会用户（非root权限）"},{"path":"bio-env.html","id":"如何从wsl1切换到wsl2","chapter":"第 10 章 环境搭建","heading":"10.1.3 如何从WSL1切换到WSL2","text":"我在Windows上使用Docker遇到的一个很奇怪的问题是，我之前的版本是WSL1,Docker无论如何都无法使用，搜索半天也没有找到解决方法，索性将WSL1升级成WSL2，没想到问题就那样解决了。参考教程：知乎：WSL1 升级为WSL2。下面是升级的过程：下载对应的内核更新包：点击下载下载对应的内核更新包：点击下载CMD中管理员身份运行代码：CMD中管理员身份运行代码：设置版本其中的Ubuntu-20.04是通过代码wsl -l -v查看到的。然后再次重启WSL即可。","code":"\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestartwsl --set-version Ubuntu-20.04 2"},{"path":"bio-env.html","id":"下载docker镜像","chapter":"第 10 章 环境搭建","heading":"10.1.4 下载Docker镜像","text":"在Docker Hub中检索下载需要的镜像。","code":""},{"path":"bio-env.html","id":"docker的使用-1","chapter":"第 10 章 环境搭建","heading":"10.1.5 Docker的使用","text":"进入WSL后运行下方代码运行Docker：其中的work是不一定的，需要看镜像给的路径是啥。","code":"sudo service --status-all \nsudo service docker start\nsudo service docker start\ndocker run -v /mnt/:/work -it omicsclass/rnaseq"},{"path":"bio-env.html","id":"如何创建自己的镜像","chapter":"第 10 章 环境搭建","heading":"10.1.6 如何创建自己的镜像","text":"先从Docker Hub下载Ubuntu的官方镜像，然后在镜像中安装需要的软件。\nPS：如何加速pip的下载：加速的R包的下载安装：在安装完成需要的软件后，先运行exit退出Docker，然后运行下面的代码生成新的镜像：然后登陆自己的Docker，登录以后把新的镜像推送到Docker Hub即可：","code":"pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple\noptions(repos=structure(c(CRAN=\"https://mirrors.tuna.tsinghua.edu.cn/CRAN/\")))\noptions(BioC_mirror=\"https://mirrors.tuna.tsinghua.edu.cn/bioconductor\")docker commit -m \" add some softwares for RNA-Seq\" -a \"xiangli\" 21bfa810c811 lixiang117423/rnaseq:v1docker push lixiang117423/rnaseq:v1"},{"path":"bio-env.html","id":"conda的安装使用","chapter":"第 10 章 环境搭建","heading":"10.2 Conda的安装使用","text":"","code":""},{"path":"bio-env.html","id":"下载安装","chapter":"第 10 章 环境搭建","heading":"10.2.1 下载安装","text":"现在官方网站下载对应版本的.sh文件。然后一路默认安装即可。安装完成后激活用户目录下的.bashrc文件即可。","code":""},{"path":"bio-env.html","id":"conda安装r及r包","chapter":"第 10 章 环境搭建","heading":"10.2.2 Conda安装R及R包","text":"","code":"conda instll r-base\nconda instll r-ggplot2\nconda install -c bioconda bioconductor-deseq2\n\n# 默认conda不自动启动\nconda config --set auto_activate_base false"},{"path":"bio-env.html","id":"安装其他软件","chapter":"第 10 章 环境搭建","heading":"10.2.3 安装其他软件","text":"其他软件的安装直接去Conda Gallery上检索进行安装。","code":""},{"path":"bio-env.html","id":"pip下载速度慢的解决方法","chapter":"第 10 章 环境搭建","heading":"10.2.4 pip下载速度慢的解决方法：","text":"","code":"pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple"},{"path":"bio-env.html","id":"git的使用","chapter":"第 10 章 环境搭建","heading":"10.3 git的使用","text":"","code":""},{"path":"bio-env.html","id":"git同时管理github与gitee","chapter":"第 10 章 环境搭建","heading":"10.3.1 git同时管理GitHub与Gitee","text":"","code":"1. 查看远程仓库地址\ngit remote -v\n\n2. 重命名远程仓库\ngit remote rename origin github\n\n3. 添加新的远程仓库\ngit remote add gitee https://gitee.com/gozhuyinglong/blog-demos.git\n\n4. 多个远程仓库推拉\ngit push github main\ngit pull github main\ngit push gitee main\ngit pull gitee main\n\n5. 将本地分支与远程分支进行关联\ngit push --set-upstream gitee main\n\n6. 直接推送不指定分支\ngit push github\ngit pull github\ngit push gitee\ngit pull gitee\n\n7. 移除远程仓库\ngit remote remove gitee"},{"path":"bio-env.html","id":"软件安装","chapter":"第 10 章 环境搭建","heading":"10.4 软件安装","text":"","code":""},{"path":"bio-env.html","id":"aspera","chapter":"第 10 章 环境搭建","heading":"10.4.1 Aspera","text":"","code":"wget https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/OSA/09cne/0/ibm-aspera-connect-3.11.0.5-linux-g2.12-64.tar.gz\n\ntar -zxvf ibm-aspera-connect-3.11.0.5-linux-g2.12-64.tar.gz\n\n./ibm-aspera-connect-3.11.0.5-linux-g2.12-64.sh\n\necho \"\"\"export PATH=\\\"/home/xiang/.aspera/connect/bin:\\$PATH\\\" \"\"\" >> ~/.bashrc\n\nsource ~/.bashrc\n\nascp -h\n\nascp-i /mnt/c/Users/Administrator/Desktop/aspera.openssh -QT -l100m -k1 d /mnt/h/BaiduNetdiskDownload/*.gz subasp@upload.ncbi.nlm.nih.gov:uploads/luolifenllf_126.com_tCdfcqJq/20210816upload\n\nascp -i aspera.openssh -QT -l1000m -k1 -d A2.R2.fastq.gz subasp@upload.ncbi.nlm.nih.gov:uploads/luolifenllf_126.com_tCdfcqJq/20210816upload"},{"path":"bio-env.html","id":"安装motif搜索软件meme","chapter":"第 10 章 环境搭建","heading":"10.4.2 安装Motif搜索软件MEME","text":"","code":"wget https://meme-suite.org/meme/meme-software/5.4.1/meme-5.4.1.tar.gz\ntar zxf meme-5.4.1.tar.gz\ncd meme-5.4.1\n./configure --prefix=$HOME/meme --enable-build-libxml2 --enable-build-libxslt\nmake\nmake test\nmake install\n# 编辑/etc/profile\nexport PATH=\"$PATH:/root/meme/bin\"\n#export PATH=$HOME/meme/bin:$HOME/meme/libexec/meme-5.4.1:$PATH"},{"path":"bio-env.html","id":"安装结构域搜索软件hmmer","chapter":"第 10 章 环境搭建","heading":"10.4.3 安装结构域搜索软件HMMER","text":"","code":"  % brew install hmmer               # OS/X, HomeBrew\n  % port install hmmer               # OS/X, MacPorts\n  % apt install hmmer                # Linux (Ubuntu, Debian...)\n  % dnf install hmmer                # Linux (Fedora)\n  % yum install hmmer                # Linux (older Fedora)\n  % conda install -c bioconda hmmer  # Anaconda"},{"path":"bio-env.html","id":"腾讯云如何用root登录","chapter":"第 10 章 环境搭建","heading":"10.4.4 腾讯云如何用root登录","text":"","code":"#先用 ubuntu 账号登录，执行\n\nsudo passwd root\nsudo vi /etc/ssh/sshd_config\n#找到 PermitRootLogin without-password 这一行，把后面的 without-password 改为 yes，保存文件\nsudo service ssh restart"},{"path":"bio-env.html","id":"ubuntu搭建生信环境","chapter":"第 10 章 环境搭建","heading":"10.5 Ubuntu搭建生信环境","text":"下面的代码来自王通老师。","code":""},{"path":"bio-env.html","id":"旧版本","chapter":"第 10 章 环境搭建","heading":"10.5.1 旧版本","text":"","code":"#下载ubuntu 20.04镜像\nhttps://ftp.sjtu.edu.cn/ubuntu-cd/20.04.1/ubuntu-20.04.1-desktop-amd64.iso\n\n#制作USB启动盘\n#下载使用rufus https://rufus.ie/\n#或者ultraISO https://cn.ultraiso.net/\n\n#挂载磁盘\n#假设未挂载磁盘为/dev/sdb\nfdisk -l\nparted /dev/sdb\n#交互界面 \nmklabel gpt\nquit\n#格式化磁盘\nmkfs.xfs -f /dev/sdb \n#挂载磁盘\nmkdir /ifs1\nmount /dev/sdb /ifs1\n#修改fstab\necho \"/dev/sdb /ifs1                       xfs     defaults,uquota        0 0\" >>/etc/fstab\n\n#创建root账户\nsudo passwd root\n输入当前用户密码：\n输入root密码：\n再次输入root密码：\n\n#以下操作使用root账户完成\nsu -\n\n#修改源\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nsed -i 's#cn.archive.ubuntu.com#mirrors.aliyun.com#g' /etc/apt/sources.list\nsudo apt-get update && sudo apt-get upgrade\n\n#ssh登录\napt install openssh-server\nps -e |  grep ssh   #检查ssh server是否启动\nsudo /etc/init.d/ssh start  #启动\n\n#安装java\napt-get install openjdk-8-jdk\nsudo add-apt-repository ppa:webupd8team/java\napt update\napt install -y oracle-java8-installer\napt install -y zlib1g zlib1g.dev\napt install -y libboost-dev\n\n#安装R以及Rstudio\napt install -y r-base\nhttps://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb\ndpkg -i rstudio-1.3.1093-amd64.deb\n\n#安装一些小工具\napt install -y git vim tree creen htop cmake lftp lrzsz\n\n#apt安装生物软件\napt install -y bwa\napt install -y samtools \napt install -y bcftools\napt install -y blast2\napt install -y bedtools\napt install -y seqtk\napt install -y minimap2\napt install -y bowtie2\napt install -y phylip\napt install -y clustalx\napt install -y canu\napt install -y kraken2\napt install -y hisat2\napt install -y stringtie\napt install -y jellyfish\napt install -y circos\napt install -y nanopolish\napt install -y nanook\napt install -y centrifuge\napt install -y rna-star\napt install -y freebayes\napt install -y cnvkit\napt install -y spades\napt install -y mothur\napt install -y muscle\napt install -y mafft\napt install -y iqtree\napt install -y sniffles\napt install -y last-align\napt install -y augustus\napt install -y bamtools \napt install -y bedops\napt install -y delly\n\n#安装浏览器\napt-get install -y chromium-browser\n\n#安装微信\nwget https://www.ubuntukylin.com/public/pdf/wine-wechat_1.0-windows2.8.6_all.deb\n#Debian 系的操作系统可以执行这样的命令：\nsudo dpkg --add-architecture i386\nsudo apt update\n#安装 wine 应用所需的依赖，也就是 wine：\nsudo apt install wine-stable\n#使用 dpkg 安装 wine 应用：\nsudo dpkg -i wine-wechat_1.0-windows2.8.6_all.deb\n\n#安装bioconda\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh  \nsh Miniconda3-latest-Linux-x86_64.sh  \nsource ~/.bashrc\n\n#添加软件源\nconda config --add channels bioconda \nconda config --add channels conda-forge"},{"path":"bio-env.html","id":"新版本","chapter":"第 10 章 环境搭建","heading":"10.5.2 新版本","text":"","code":"#############################\n#     获得Linux环境          #\n#############################\n#下载ubuntu 20.04镜像\nhttps://ftp.sjtu.edu.cn/ubuntu-cd/20.04.1/ubuntu-20.04.1-desktop-amd64.iso\n\n#制作USB启动盘\n#下载使用rufus https://rufus.ie/\n#或者ultraISO https://cn.ultraiso.net/\n\n#挂载磁盘\n#假设未挂载磁盘为/dev/sdb\nfdisk -l\nparted /dev/sdb\n#交互界面 \nmklabel gpt\nquit\n#格式化磁盘\nmkfs.xfs -f /dev/sdb \n#挂载磁盘\nmkdir /ifs1\nmount /dev/sdb /ifs1\n#修改fstab\necho \"/dev/sdb /ifs1                       xfs     defaults,uquota        0 0\" >>/etc/fstab\n\n#如果不安装系统，购买腾讯云服务器一年74元，2核心4G版本即可\nhttps://curl.qcloud.com/gm6m0QoY\n\n#############################\n#         基本配置           #\n#############################\n#创建root账户\nsudo passwd root\n输入当前用户密码：\n输入root密码：\n再次输入root密码：\n\n#以下操作使用root账户完成\nsu -\n\n#修改源\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\nsed -i 's#cn.archive.ubuntu.com#mirrors.aliyun.com#g' /etc/apt/sources.list\nsudo apt-get update && sudo apt-get upgrade\n\n#ssh登录\napt install openssh-server\nps -e |  grep ssh   #检查ssh server是否启动\nsudo /etc/init.d/ssh start  #启动\n\n#安装java\napt-get install openjdk-8-jdk\nsudo add-apt-repository ppa:webupd8team/java\napt update\napt install -y oracle-java8-installer\napt install -y zlib1g zlib1g.dev\napt install -y libboost-dev\n\n#############################\n#        安装R以及Rstudio    #\n#############################\napt install -y r-base\nhttps://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb\ndpkg -i rstudio-1.3.1093-amd64.deb\n\n#安装一些小工具\napt install -y git vim tree creen htop cmake lftp lrzsz\n\n#apt安装生物软件\napt install -y bwa\napt install -y samtools \napt install -y bcftools\napt install -y blast2\napt install -y bedtools\napt install -y seqtk\napt install -y minimap2\napt install -y bowtie2\napt install -y phylip\napt install -y clustalx\napt install -y canu\napt install -y kraken2\napt install -y hisat2\napt install -y stringtie\napt install -y jellyfish\napt install -y circos\napt install -y nanopolish\napt install -y nanook\napt install -y centrifuge\napt install -y rna-star\napt install -y freebayes\napt install -y cnvkit\napt install -y spades\napt install -y mothur\napt install -y muscle\napt install -y mafft\napt install -y iqtree\napt install -y sniffles\napt install -y last-align\napt install -y augustus\napt install -y bamtools \napt install -y bedops\napt install -y delly\n\n#安装浏览器\napt-get install -y chromium-browser\n\n#安装微信\nwget https://www.ubuntukylin.com/public/pdf/wine-wechat_1.0-windows2.8.6_all.deb\n#Debian 系的操作系统可以执行这样的命令：\nsudo dpkg --add-architecture i386\nsudo apt update\n#安装 wine 应用所需的依赖，也就是 wine：\nsudo apt install wine-stable\n#使用 dpkg 安装 wine 应用：\nsudo dpkg -i wine-wechat_1.0-windows2.8.6_all.deb\n\n#############################\n#       安装bioconda         #\n#############################\nwget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh  \nsh Miniconda3-latest-Linux-x86_64.sh  \nsource ~/.bashrc\n\n#添加软件源\nconda config --add channels bioconda \nconda config --add channels conda-forge\n\n#############################\n# 使用bioconda安装常用软件   #\n#############################\n#安装mamba\nconda install -c conda-forge -y mamba\n\n#利用mamba安装软件\nmamba install -y bwa \nmamba install -y samtools\nmamba install -y bcftools\nmamba install -y blast \nmamba install -y blat \nmamba install -y mummer \nmamba install -y mafft \nmamba install -y muscle \nmamba install -y lastz\nmamba install -y sra-tools\nmamba install -y seqkit\nmamba install -y seqtk\nmamba install -y bedtools\nmamba install -y bedops\nmamba install -y gfatools\nmamba install -y circos\nmamba install -y entrez-direct\nmamba install -y emboss\n\n#安装数据质控软件\nmamba install -y fastqc multiqc \nmamba install -y trimmomatic\nmamba install -y fastp\n\n#安装基因组拼接相关工具\nmamba install -y velvet\nmamba install -y flye\nmamba install -y miniasm\nmamba install -y canu\nmamba install -y megahit\nmamba install -y spades\nmamba install -y quast\nmamba install -y racon\nmamba install -y miniasm\nmamba install -y nanopolish\n\n#安装基因功能分析软件\nmamba install -y prodigal\nmamba install -y glimmer\nmamba install -y augustus\nmamba install -y trf\n\n#############################\n#      使用虚拟环境             #\n#############################\n#1 创建python 2.7环境\nconda create -n py27 -y python=2.7\n#查看现有虚拟环境\nconda env list\n#激活python2.7环境\nconda activate py27\n#查看python版本\npython -V\n\n#2 安装nanoplot\nconda create -n nanoplot -y nanoplot\n\n#3 bioconda管理R及R包\nmamba install -y r-base=4.1.1\nmamba install -y bioconductor-deseq2\nmamba install -y bioconductor-rnaseqgene\nmamba install -y bioconductor-clusterProfiler"},{"path":"bio-env.html","id":"shell终端配置","chapter":"第 10 章 环境搭建","heading":"10.5.3 shell终端配置","text":"https://ohmyposh.dev/","code":"wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh \nsh install.sh\n\nsudo apt install powerline fonts-powerline #安装字体\nsudo apt install zsh-syntax-highlighting # 安装语法并启用高亮插件\necho \"source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ~/.zshrc\n\nvim ~ /.zshrc   # 打开 .zshrc\nZSH_THEME=\"crunch\"   # 自定义主题\n\n# 更多主题可以从 https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins 获取"},{"path":"bio-env.html","id":"nginx搭建静态网页","chapter":"第 10 章 环境搭建","heading":"10.6 Nginx搭建静态网页","text":"下载安装Nginx随便找个的地方放文件编辑配置文件然后用server_name访问即可。","code":"sudo apt-get install nginxcd /etc/nginx/conf.d/server {\n  server_name static.naice.me; \n  root /www/static-web/static-web; \n  index index.html; \n  location ~* ^.+\\.(jpg|jpeg|gif|png|ico|css|js|pdf|txt){\n    root /www/static-web/static-web;\n  } \n}"},{"path":"genomics.html","id":"genomics","chapter":"第 11 章 基因组学","heading":"第 11 章 基因组学","text":"","code":""},{"path":"genomics.html","id":"基因家族分析","chapter":"第 11 章 基因组学","heading":"11.1 基因家族分析","text":"基因家族分析是一种常见的生物信息学分析套路，也是生物信息学数据挖掘发表小文章常用的分析方法，和GEO挖掘等类似。基因家族的分析鉴定可以用pfam上的hmm文件进行基因家族的检索鉴定，也可以用blast的方法进行比对鉴定，通常是适用拟南芥对应的基因家族进行比对鉴定。\n植物转录因子数据库，点击访问。","code":""},{"path":"genomics.html","id":"基因家族分析思路及文章撰写思路","chapter":"第 11 章 基因组学","heading":"11.1.1 基因家族分析思路及文章撰写思路","text":"基因家族分析是继GEO数据挖掘后，一种新的生物信息学挖掘策略。如何做基因家族研究，可以参考这个帖子：http://www.planttech.com.cn/blog/58882464a46。为什么我们要选择三七呢？首先三七参考基因组还不是很多，我们实验室有一个，今年杨生超副校长有一篇最新的，这些基因组数据为我们后续做三七基因家族研究提供了坚实的基础；其次，我们实验室以三七为主，有大量的三七资源，方便我们后续验证。文章撰写的格式建议以Frontiers Plant Science为模板，后续方便修改。每个基因家族都有大量的综述，因为基因家族基本都是转录因子，转录因子基本都是有很好的综述的。","code":""},{"path":"genomics.html","id":"数据准备","chapter":"第 11 章 基因组学","heading":"11.1.2 数据准备","text":"需要准备的数据主要是参考基因组数据，包括fasta格式的序列文件、gff或gtf格式的基因组注释文件、蛋白质序列文件（通常是每个转录本的蛋白序列）、cDNA序列等文件。如果有转录组数据的话进行对应的转录组分析即可。除开上述这些文件外，还需要适用的文件还有.hmm格式的文件。","code":""},{"path":"genomics.html","id":"软件准备","chapter":"第 11 章 基因组学","heading":"11.1.3 软件准备","text":"只需要会使用Linux系统，会安装Docker即可，然后下载组学大讲堂的镜像即可。点击浏览镜像地址。Docker的安装适用方法参考10.1。","code":""},{"path":"genomics.html","id":"分析过程","chapter":"第 11 章 基因组学","heading":"11.1.4 分析过程","text":"mRNA_ID与基因ID的提取\n由于一个基因会对应多个转录本，因此一个基因下会对应多个mRNA的编号。在后续的分析中，每个基因只需要选择一个转录本的编号进行分析即可，因为每个基因不同的转录本的序列差异是较小的。提取的代码：检索结构域\n这一步主要是以.hmm文件为基础检索该物种蛋白序列中含有该结构域的序列。输入文件包括.hmm文件和蛋白文件，输出hmmsearch的检索结果。其中用于后续筛选的是evalue这个参数，部分文章以0.001为阈值。of那一列表示的是某个基因对应的这个结构域有几个。选择结构域\n由于一个基因的单个转录本可能会比对到多个结构域，因此需要对比对到的结构域进行选择。默认选择的是第一个结构域。下面代码的最后一个参数是hmmsearch输出文件里面的E-value,如果需要全部的第一个结构域，将阈值设置为1即可。多序列比对\n之所以要进行多序列比对，是因为下载的.hmm文件是来自很多物种的这个结构域组成的隐马尔科夫模型，进行多序列比对后将该物种检索到的结构域序列进行比对，再次构建该物种该基因家族的隐马尔科夫模型，会更加准确。重构隐马尔科夫模型重新进行检索\n利用构建得到的新的隐马尔科夫模型重新进行检索结构域。筛选输出结果\n对重新检索后的结果进行筛选，也是对E-value进行筛选。去除重复的ID\n上一步筛选得到的是该种中哪些基因是潜在的目标基因家族成员，而一个基因对应了多个mRNA，因此，只需要在筛选后的每个基因中选择一个具有代表性的mRNA进行后续的分析即可。这个提取唯一ID的步骤需要手动完成（PS：手动完成也很快）。手动挑选完mRNA的ID放在第一列，另存为文件uniqueID.txt。提取蛋白序列\n在得到基因ID后需要提取蛋白序列进行后续的分析。在SMART或者Pfam或NCBI CDD确认这些基因是真真正正含有该结构域，没有的基因要剔除！在SMART中没有检索到结构域的基因在gene...SMART.txt中；在Pfam中全都是WRKY结构域，对应文件为Pfam.results.txt。计算蛋白质分子量等构建进化树\n选择利用软件CLUSTALW进行多序列比对，然后利用MEGA构建进化树。CLUSTALW输出结果转换成.fasta格式的方法参考4.2。Motif分析基因结构分析基因在染色体上的定位顺式作用元件分析\n脚本默认的启动子长度是1500bp。将提取得到的启动子序列上传到Plane CARE进行分析。基因家族成员的亚细胞定位分析\n两个网站：WolfPsort和Cello。","code":"perl code/script/mRNAid_to_geneid.pl data/unzip_data/*.gff* results/step.1.get.mRNA.and.gene.ID/mRNA2geneID.txt\nperl code/script/geneid_to_mRNAid.pl data/unzip_data/*.gff* results/step.1.get.mRNA.and.gene.ID/geneID2mRNAid.txthmmsearch --domtblout results/step.2.domain.search/hmm.txt --cut_tc data/unzip_data/*.hmm data/unzip_data/*.pep*perl code/script/domain_xulie.pl results/step.2.domain.search/hmm.txt data/unzip_data/*.pep* results/step.2.domain.search/domain.fa 1.2e-28echo -e '1\\nresults/step.2.domain.search/domain.fa\\n2\\n1\\nresults/step.2.domain.search/out.aln\\nr.domain.search/out.dnd\\nX\\n\\n\\nX\\n' |clustalwhmmbuild results/step.2.domain.search/new.hmm results/step.2.domain.search/out.alnhmmsearch --domtblout results/step.2.domain.search/new.out.txt --cut_tc results/step.2.domain.search/new.hmm data/unzip_data/*.pep*grep -v \"^#\" results/step.2.domain.search/new.out.txt|awk '$7<0.001 {print}' > results/step.2.domain.search/domain.new.out.selected.txtperl code/script/select_redundant_mRNA.pl results/step.1.get.mRNA.and.gene.ID/mRNA2geneID.txt results/step.2.domain.search/domain.new.out.selected.txt results/step.2.domain.search/remove_redundant_IDlist.txtperl code/script/get_fa_by_id.pl results/step.2.domain.search/uniqueID.txt data/unzip_data/*.pep* results/step\n.2.domain.search/pep.need.confirm.faperl code/script/stat_protein_fa.pl results/step.2.domain.search/pep.need.confirm.fa results/step.2.domain.search/pep.MW.txtmeme results/step.3.seq.and.tree/pep_confirmed.fa -protein -oc results/step.4.motif/ -nostatus -time 18000 -maxsize 6000000 -mod anr -nmotifs 10 -minw 6 -maxw 100perl code/script/get_gene_exon_from_gff.pl -in1 results/step.2.domain.search/uniqueID.txt -in2 data/unzip_data/*.gff* -out results/step.5.gene.structure/gene_exon_info.gffsamtools faidx data/unzip_data/*.dna*\ncp data/unzip_data/*.fai results/step.5.gene.structure/\nperl code/script/get_gene_weizhi.pl -in1 results/step.2.domain.search/uniqueID.txt -in2 data/unzip_data/*.gff* -out results/step.5.gene.structure/mrna_location.txtperl code/script/get_promoter.pl data/unzip_data/*dna.top* results/step.5.gene.structure/mrna_location.txt results/step.6.cis.acting.element/promoter.txt"},{"path":"genomics.html","id":"基因组共线性分析","chapter":"第 11 章 基因组学","heading":"11.2 基因组共线性分析","text":"软件JCVI：https://github.com/lixiang117423/jcvi","code":""},{"path":"rnaseq.html","id":"rnaseq","chapter":"第 12 章 RNA-Seq","heading":"第 12 章 RNA-Seq","text":"","code":""},{"path":"meta.html","id":"meta","chapter":"第 13 章 代谢组学","heading":"第 13 章 代谢组学","text":"","code":""},{"path":"pro.html","id":"pro","chapter":"第 14 章 蛋白质组","heading":"第 14 章 蛋白质组","text":"","code":""},{"path":"multi.html","id":"multi","chapter":"第 15 章 多组学","heading":"第 15 章 多组学","text":"","code":""},{"path":"patho.html","id":"patho","chapter":"第 16 章 植物病理学","heading":"第 16 章 植物病理学","text":"","code":""},{"path":"patho.html","id":"何祖华2021cell文章","chapter":"第 16 章 植物病理学","heading":"16.1 何祖华2021Cell文章","text":"这是一篇让人读完以后叹为观止的文章(Gao et al. 2021)，精彩，实在是精彩！故事是这样开始的，在TP309（粳稻）育种群体中，发现一个很特殊的变种，这个变种携带了一个叫做rod1的基因，这个基因有什么特别的地方呢？通过田间试验和室内试验发现，携带了rod1基因的植株对水稻纹枯病、水稻稻瘟病和水稻白叶枯病这三种严重影响水稻生产的病害都具有广谱抗性（下图ABC）；而且，其植株体内的SA和JA的含量也比TP309的高很多（下图D）。为了验证rod1的广谱抗性，利用常规的RNA-Seq对TP309和携带rod1的植株进行转录组测序，测序的结果可以说是非常明显了，但从热图上看是完全分开的（下图E），然后呢对这些差异基因进行GO富集分析，发现有几个很特殊的GO term在rod1里面没有，这几个通路分别是内肽酶、钙结合及DNA结合（下图F紫色的字）。rod1中显著富集到的GO term有离子结合、氧化酶等。于是，作者他们认为rod1中Ca\\(^{2+}\\)与ROS两者之间存在某种关系，导致其免疫上调。然后在田间观察TP309和rod1对水稻产量的影响，发现在自然田间条件下的话，rod1植株的单株产量远低于TP309的；但是在天然的稻瘟病苗圃中，rod1的单株产量远高于TP309。这个结果能说明啥呢？这个结果说明如果有病害侵染的话，rod1植株会表现得更好，也就是产量更高。下一步要做的，肯定是把这个基因克隆出来，只有克隆出来，才能做进一步的深入研究。利用图位克隆技术在水稻的6号染色体附近大概53kb的一个区域定位到该基因（下图A），命名为ROD1；进一步比较了水稻参考基因组水稻品种Nippionbare、TP309及rod1在该区域的序列差异，发现rod1存在一个核苷酸的缺失，也就是TP309里面的是ATGGG，在rod1里面是AT-GG，中间少了个G（下图B）。为了确定他们鉴定的这个基因，利用遗传互补（也就是利用野生型基因补偿突变型基因使其恢复正常的表型）确认了该基因的功能（下图C）。这个基因的蛋白长度大概是225个氨基酸长度，并且含有一个C2结构域（蛋白质激酶C保守结构域2，承担信号转导和细胞膜转运功能），这个结构域上还含有4个天冬氨酸残基（下图A）。然后利用玉米泛素启动子将ROD1过表达，过表达以后呢制作对水稻上的三种病害的抗性都降低了（下图DEFGH）。这个结果说明ROD1是水稻免疫抑制子，也就是它越表达，水稻的抗性越低。不同的基因在植株体内表达的位点是不一样的，有的基因在根系表达多，有的基因在叶片中表达更旺盛。那ROD1主要是水稻植株的那个部位表达呢？通过原位杂交（situ hybridization），发现ROD1 主要是在叶片上进行表达（下图B），而叶片更好是更多病原菌侵染的部位。而且在水稻植株被水稻白叶枯病菌侵染后，ROD1 的表达会被诱导上调（下图C）。rod1在田间生长的时候穗子比TP309短，穗子上的分支也更少（下图K），但是在过表达ROD1 后，穗子更长，产量也更高（下图KL）。这个结果表明ROD1在水稻的抗性和生长适应性两方面具有不同的作用。也就是rod1的抗性高，但是产量低；ROD1 的抗性低，但是产量高。这也符合植物生长-免疫平衡的基本原则。再下一步是探究ROD1的同系物的分布情况，在开花植物中都有其同系物的存在，但是在苔藓等低等植物中没有其同系物的踪迹（下图AB）。这个结果表明ROD1这一类C2结构域蛋白出现在植物进化的较晚期。ROD1类蛋白在单子叶作物中有着极高的序列保守性，但是在拟南芥等十字花科的植物中却有着较高的多样性（下图B）。要是我分析，肯定是到这里就结束了，但是作者团队在这个地方提出的问题是“ROD1类蛋白在谷物类作物的免疫过程中是否有保守作用呢？”。于是呢，就用CRISPR/Cas9技术在玉米上搞了个突变体，结果发现突变体中PR基因的表达量更高，而且突变体对R.solani 的抗性更强（下图CDE）。这个结果加上前面的结果表明ROD1及其同系物在谷物中是一类特别的感病基因，在谷物免疫的过程中扮演者保守的功能。前面提到ROD1蛋白结构含有1个C2结构域，那这个有什么用呢？C2结构域通常是Ca\\(^{2+}\\)感受器，这类结构域依赖Ca\\(^{2+}\\)与磷脂结合，从而将蛋白质靶向到特定的膜区域。那ROD1这个蛋白到底能不能和Ca\\(^{2+}\\)结合呢？能不能结合那肯定是要有个参照，怎么获得有效的参照呢？对这个蛋白的4个氨基酸残基进（因为C2结构域的氨基酸残基影响其和Ca\\(^{2+}\\)的结合）行突变，有单突变、双重突变、三重突变及四重突变（下图C）。利用微量热泳动方法来探究ROD1这个蛋白和Ca\\(^{2+}\\)的结合特性（下图D），图中的KD值的大小表示的是分子间的亲和性，越亲和的，其KD值越小。没有突变的ROD1和Ca\\(^{2+}\\)的KD值很小，而单位点突变和四重突变的KD值都很大，整整大了3个数量级。Ca\\(^{2+}\\)能够改变C2结构域的电位，使得C2结构与能够与磷脂进行结合。那下一步就是探究ROD1与不同脂质结合的能力与特异性（下图A）。从图中可以看到的是，ROD和PI(3,5)P2、PI(4)P及PI(5)P结合较好，但是Ca\\(^{2+}\\)螯合剂EGTA存在的时候，ROD1就不能与这些脂质进行结合。也就是说当没有Ca\\(^{2+}\\)的时候，ROD1是不能与磷脂进行结合的。ROD1这个蛋白在哪里发挥功能呢？这也就需要对其进行定位。通过定位发现这个蛋白位于质膜周围的细胞外围空间（下图B）。但是将其4个氨基酸残基进行突变后都不同程度地出现了蛋白的降解（下图DE\\(_上\\)）。用flg22处理后，ROD1在质膜上的积累量更多（下图EF），这说明免疫激活促进了ROD1在质膜上的分布。除了利用突变体看突变氨基酸残基后蛋白的定位，还检测突变不同的氨基酸位点后其抗性的变化，也就是过表达这些基因，不同程度的突变都导致对应植株的抗性降低，对三种病害的响应出奇一致（下图FGH）。不同位点的突变对植株的构型也有一定的影响（下图I）。上述这些结果表明ROD1和Ca\\(^{2+}\\)结合后，进一步与磷脂结合，最后在质膜上“定居”。其实在这个部分已经能够看出，要是没有Ca\\(^{2+}\\)，那ROD1就“手足无措”了。有了材料，有了表型，克隆到了基因，纯化到了蛋白，也知道这个基因能够影响植株的免疫，那下一步就是探究其免疫的机制。利用的方法是酵母双杂（Y2H）。首先是 以水稻稻瘟病互作的叶片建立一个cDNA文库，然后以ROD1为“鱼饵”去钓这个文库中与ROD1互作的蛋白。成功得到两个RING E3泛素连接酶，分别是RIP1和APIP6（下图）。进行更多试验后发现ROD1被RIP1和APIP6这两个蛋白泛素化（泛素化就是某个蛋白被加上一段标签，被加上标签的蛋白会被其他的细胞器所识别，大多被泛素化的蛋白的最终命运是降解）。为了进一步验证RIP1和APIP6的功能，分别构建了敲除系和过表达系。果然不出意外，敲除系的植株的抗性都降低了，而过表达系植株的抗性都提高了。怎么理解呢？将这两个蛋白敲除后，ROD1就不能被泛素化，那它就不会降解，表达量较高，因此植株的抗性被抑制；将这两个蛋白过表达后，含量增加，ROD1被“疯狂”泛素化，也就是被疯狂降解，那植株的免疫就不会受到抑制，从而表现出较强的抗性。除了RIP1和APIP6以外，酵母双杂还找到一个和ROD1互作的过氧化氢酶CatB。通过分裂荧光素酶互补试验和coIP发现ROD1和CatB是能够互作的（下图左AB）。过氧化氢酶能够清除ROS从而降低寄主的免疫水平。用CRISPR/Cas9将CatB敲除后，水稻植株体内PR基因的表达上调，植株对病害的抗性增强（下图右ABCD）。这说明CatB负向调控水稻对病害的免疫响应。那ROD1和CatB是如何互作的呢？先用不同浓度的ROD1和CatB共同清除活性氧，可以发现的随着ROD1浓度的提高，CatB的活性增强，也就是说ROD1浓度越高，那CatB清楚的活性氧也就越多（下图C）；但是将基因ROD1进行突变后，蛋白ROD1介导的CatB清除活性氧的能力没有变化（下图D），也就是ROD1只有和Ca\\(^{2+}\\)结合后才能正常和CatB互作，从而清除ROS。怎么理解呢？前面说到，如果突变ROD1C1结构域上的4个氨基酸残基，那ROD1和Ca\\(^{2+}\\)结合的能力就降低了，没有Ca\\(^{2+}\\)结合，ROD1就不能正常介导CatB对ROS的清除。进一步提取活体植株体内的ROD1，发现TP309中CatB的活性都更搞（下图EF）。与之对应的是，TP309植株中H\\(_2\\)O\\(_2\\)的含量更低（下图GHI）。这些结果说明了啥呢？说明ROD1是通过介导ROS的清除来影响植株的免疫的。CatB这个蛋白主要定位在过氧化物酶体上，但是呢在质膜上也检测到了CatB的存在，当有ROD1存在的时候CatB在质膜上积累的量更多（下图JL），这样就说明了ROD1促进CatB在质膜上的定位。进一步利用本氏烟验证发现CatB能够在一定程度上清除由MLA10介导的过敏反应，当ROD1和CatB共同作用的时候这种过敏反应几乎完全消失了。上面这些结果表明ROD1首先将CatB募集到质膜能赶上，然后再激发CatB去清除活性氧。找到这样一个基因，做完上述这些研究，其实已经很完美了。作者他们进一步探究这个基因在水稻群体中的变异情况。通过群体遗传分析发现ROD1这个位点上的核苷酸多态性很低，也就意味着这个位点在进化过程中发生了选择扫描事件（下图左A）。在约3000个水稻品种中，只有indica 这个亚种的Tajima’s D值是负值，也就意味着在indica 这个亚种中ROD1经历了不同的选择作用（下图B）。在这个基因的编码区发现了两个SNP，分别是SNP1\\(^{/C}\\)和SNP2\\(^{G/C}\\)。第一个SNP是一个非同义的突变，在这个位点上脯氨酸变成了苏氨酸；第二个SNP是一个同义突变，编码的氨基酸没有发生改变。基于这两种SNP分类，可以将其分为三种单倍型（下图右A）。随机选了178个含有这三种单倍型的水稻品种，调查其在田间对纹枯病的抗性（因为纹枯病还没有主效抗病基因），发现含有SNP1\\(^{/C}\\)的水稻品种对纹枯病的抗性更强（下图D）。将这两种SNP导入到rod1中后发现SNP1\\(^{C}\\)的抗性基本和TP309持平，SNP1\\(^{}\\)植株的抗性比rod1的弱一些（下图F），这个结果再次表明SNP1\\(^{/C}\\)确实影响植株的基础免疫。为了进一步验证SNP1\\(^{}\\)和SNP1\\(^{C}\\)的功能差异，他们构建了染色体片段替换系，发现携带SNP1\\(^{C}\\)的植株的抗性更弱（下图G），也就意味着携带SNP1\\(^{}\\)的抗性更强，但是在产量上是没有差异的。进一步探究发现这两种单倍型对CatB的影响也不一样，SNP1\\(^{C}\\)对CatB的影响更大，也就意味着ROD1上单核苷酸的变异影响其与CatB的互作。为了探明SNP1\\(^{/C}\\)的进化差异，比较了44个野生稻中ROD1的序列差异，发现只有4个野生稻携带了SNP1\\(^{C}\\)，剩下的40个都携带的是SNP1\\(^{C}\\)。SNP1\\(^{}\\)主要存在于籼稻中，而SNP1\\(^{C}\\)主要存在于野生稻和粳稻中，而籼稻主要分布在热带和亚热带，而粳稻主要分布在温带，也就是说SNP1\\(^{C}\\)和SNP1\\(^{C}\\)的分布是有明显的分布差异的（下图H）。总之，这些结果表明ROD1等位基因的变化导致其清除ROS的能力有差异，也就导致了品种特异性的抗性差异。之前鉴定到的与ROD1互作的蛋白APIP6有报道它能够和稻瘟病菌的效应子AvrPiz-t互作并将其降解，RIP1和APIP6高度相似，那RIP1能不能与AvrPiz-t互作呢？通过一波试验发现这两个蛋白确实能够互作。也就是说ROD1与AvrPiz-t都与RIP1和APIP6互作，而且ROD1和AvrPiz-t都能抑制寄主免疫，那AvrPiz-t抑制寄主免疫的机制是不是和ROD1一样呢？一波试验过后发现AvrPiz-t和ROD1一样，与同样的E3泛素连接酶互作，参与同样的降解通路，同样促进了过氧化物酶介导的ROS清除来抑制寄主植物的免疫。利用ROD1的启动子在rod1中过表达AvrPiz-t，发现过表达后，rod1原先的抗性基本全部丧失（下图BC）。然后呢利用两个不同的水稻品种ZH11和TP309进行进一步验证，其中ZH11含有AvrPiz-t的抗性基因，而TP309没有这个对应的基因，两个水稻品种都接种稻瘟病菌TH12（没有效应子AvrPiz-t）。发现ROD1能够在一定程度上恢复TH12的致病力（下图D）。再比较ROD1和AvrPiz-t的蛋白结构后发现这两个蛋白的结构极其相似，也就意味着它们有着一样的的免疫抑制机制。","code":""},{"path":"liter-genomics.html","id":"liter-genomics","chapter":"第 17 章 基因组学","heading":"第 17 章 基因组学","text":"","code":""},{"path":"liter-rnaseq.html","id":"liter-rnaseq","chapter":"第 18 章 RNA-Seq","heading":"第 18 章 RNA-Seq","text":"","code":""},{"path":"liter-meta.html","id":"liter-meta","chapter":"第 19 章 代谢组学","heading":"第 19 章 代谢组学","text":"","code":""},{"path":"liter-pro.html","id":"liter-pro","chapter":"第 20 章 蛋白质组","heading":"第 20 章 蛋白质组","text":"","code":""},{"path":"myarticle.html","id":"myarticle","chapter":"第 21 章 文章发表","heading":"第 21 章 文章发表","text":"","code":""},{"path":"class.html","id":"class","chapter":"第 22 章 上课笔记","heading":"第 22 章 上课笔记","text":"","code":""},{"path":"class.html","id":"李成云现代植物病理学","chapter":"第 22 章 上课笔记","heading":"22.1 李成云：现代植物病理学","text":"","code":""},{"path":"class.html","id":"section","chapter":"第 22 章 上课笔记","heading":"22.1.1 20211022","text":"韩斌野生稻文章韩斌野生稻文章国际水稻所最新的3K文章（未发表）国际水稻所最新的3K文章（未发表）TIR-NBS-LRR在水稻中没有，但是CC-NBS-LRR在水稻中很多TIR-NBS-LRR在水稻中没有，但是CC-NBS-LRR在水稻中很多DOI：10.1007/s00122-004-1758-x水稻上的R基因的分布DOI：10.1007/s00122-004-1758-x水稻上的R基因的分布基因资源库基因资源库水稻白叶枯病菌释放的效应子可以进入到细胞核，与寄主蛋白进行互作水稻白叶枯病菌释放的效应子可以进入到细胞核，与寄主蛋白进行互作Pita的三篇文章可以参考Pita的三篇文章可以参考Pigm, Pi1、5、9这些抗性基因只在籼型水稻中存在Pigm, Pi1、5、9这些抗性基因只在籼型水稻中存在长期的协同进化过程中，寄主和病原共有的基因！！！长期的协同进化过程中，寄主和病原共有的基因！！！","code":""},{"path":"class.html","id":"section-1","chapter":"第 22 章 上课笔记","heading":"22.1.2 20211105","text":"recogniton cofactor NB-LRR/Avr interactions蛋白没有任何已知的Motif的时候，可能是个新功能蛋白；没有预测到亚细胞定位的时候也需要考虑是否是新功能蛋白。","code":""},{"path":"other.html","id":"other","chapter":"第 23 章 其他笔记","heading":"第 23 章 其他笔记","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
