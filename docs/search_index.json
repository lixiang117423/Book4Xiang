[["index.html", "小蓝哥的知识荒原 简介", " 小蓝哥的知识荒原 李详 2021年10月1日 简介 我，李详，昵称小蓝哥。现于云南农业大学攻读植物病理学博士学位。 个人博客：小蓝哥的知识荒原 运营公众号： "],["r.html", "Chapter1 R语言知识汇总 1.1 本章前言 1.2 R包pac4xiang的使用 1.3 R包ggmotif的使用方法 1.4 ggplot2绘图相关 1.5 服务器搭建Rshiny-server 1.6 Ubuntu安装devtools 1.7 R shiny开发", " Chapter1 R语言知识汇总 1.1 本章前言 本章主要是关于R语言的相关知识，包括R语言基础知识、数据统计分析、数据可视化及机器学习等内容。 1.2 R包pac4xiang的使用 pac4xiang这个R包是我自己开发的，包含了一些我自己常用的函数。包目前在GitHub上，更多功能还在完善中，待进一步开发。 1.2.1 安装 在R中运行下面的代码安装pac4xiang。 devtools::install_github(&#39;https://github.com/lixiang117423/pac4xiang&#39;) 1.2.2 使用方法 1.2.2.1 calStandCurve 该函数用与计算相对定量qPCR的标曲。qPCR标曲点样参照图1.1。按照我的思路和习惯，我会准备8个浓度梯度的cDNA,从高到低分别是C0到C8。C0是对应批次下多有样品cDNA的组合，然后再以一定的稀释倍数稀释得到C1，C1再以同样的倍数稀释得到C2，依此类推，直到得到C8。 图1.1: qPCR标曲点样示意图 函数具体怎么用呢？参考下方的代码： df.1 &lt;- calStandCurve( data = &quot;20210927下机数据/20210928lx_1.txt&quot;, # 下机数据位置 genes = c(&quot;OsPOX223&quot;, &quot;OsAPX1&quot;, &quot;OsAPX2&quot;, &quot;OsPAL&quot;),# 基因名称,与点样表顺序对应 rep = 3, # 技术重复的数量 dilution = 4, # 稀释倍数 start = 2, # 从第几行开始计算 end = 6, # 到第几行终止计算 drop.NA = TRUE, # 是否剔除空值 fig.type = &quot;pdf&quot; # 保存的图片的文件格式 ) 其中基因的数量和技术重复的数量乘起来必须是12；基因的顺序必须是从左到右的；输入稀释倍数后告诉程序后续的标曲建立如何取相应的对数；start表示从第几行开始计算，如start = 2表示的是从B行开始计算标曲；对应的end = 6表示的是到第6行，也就是F行结束，也就意味着第一行和最后两行其实是不用的。默认是保存标曲的图片的，如果不需要保存图片加上save.fig = FALSE即可，默认的图片格式是pdf格式，可以自定义。 图1.2: 函数calStandCurve返回的数据框 返回的结果是个数据框（参考图1.2），包含了基因名称、标曲公式、斜率、截距、R\\(^2\\)、P值、该标曲适用的自变量范围（最大值和最小值）及计算标曲的日期等。保存的图片默认存在当前工作目录下（运行getcwd()查看当前R语言工作目录）。 1.2.2.2 calRTqPCR 该函数在calStandCurve函数返回的标曲结果的基础上可以计算不同处理下各基因的表达情况。样品的点样方法参考图1.3。 图1.3: qPCR标曲点样示意图 计算表达量的代码如下： exp.1 &lt;- calRTqPCR( data = &quot;20210927下机数据/20210929lx_1.txt&quot;,# 下机数据位置 StandCurve = df.1,#标曲对应的数据框，上一步的输出结果 genes = c(&quot;OsPOX223&quot;, &quot;OsAPX1&quot;, &quot;OsAPX2&quot;, &quot;OsPAL&quot;),# 基因名称,与点样表顺序对应 treatment = c(&quot;CK&quot;, &quot;Inter&quot;, &quot;Infect&quot;) # 三个不同的处理分别是什么 ) 其中的data就的样品的下机导出数据，StandCurve是函数calStandCurve返回的数据框，gene需要严格控制大小写，必须和输入函数calStandCurve的基因名称一样，treatment是指定从左到右的处理分别是什么，这个是为了后续方便进行t检验。 1.2.2.3 getAlignResults 该函数可以将软件CLUSTALW的输出文件变成.fasta格式的比对结果。 写这个函数的原因在于每次我用MEGA进行序列比对构建进化树的时候都报错，不是字符串有问题就是长度不对，索性直接用Linux系统下的CLUSTALW进行序列比对，然后用MEGA构建进化树，百试不爽！ my.aln = getAlignResults(aln = &#39;test.aln&#39;) 运行完成后会在当前目录下生成一个YourAlignResults.fasta文件，就是fasta格式的比对文件，然后就可以用来构建进化树了。 - mult.aov 该函数用于多分组数据进行方差分析。 multGroupTtest 该函数用于进行多分组的t检验。 这个函数是用于进行多组t检验的。比如每次跑qPCR，会有多个处理多个目的基因，这个时候就需要关注每个目的基因在不同的处理中的表达量。用法参考下方代码： t.test &lt;- multGroupTtest( data = exp.all.final, # 输入矩阵 group1 = &quot;Gene&quot;, # 第一个分组名称 group2 = &quot;Treatment&quot;, # 第二个分组名称 CK = &quot;CK&quot;, # 指定CK是叫什么 value = &quot;Expression&quot;, # 指定用于比较的数值在哪一列 level = 0.95 # 指定检验水平 ) 1.2.2.4 plot96well 该函数用于可视化Roche96孔板的Cq值。 plot96well(data = &quot;20210927下机数据/20210928lx_1.txt&quot;) 1.2.2.5 plotCisElement 该函数用与可视化基因启动子上的顺式作用元件。需要输入的参数有三个： 1.2.2.6 data：plantCARE返回的文件； 1.2.2.7 length：启动子长度； 1.2.2.8 Cis：需要展示哪些顺式作用元件。 1.2.2.9 plotGeneStructure 该函数用于可视化基因结构。输入文件为.gtf文件。 如果同时输入对应的进化树文件，那么就会按照进化树的顺序对基因名称进行排序，可以和ggtree进行联用。 1.2.2.10 fasta2df 这个函数主要是为了将fasta格式转换成R中常见的data.frame格式。使用很简单，输入fasta格式即可。 1.2.2.11 df2fasta 这个函数主要是将data.frame格式的序列文件转换成fasta格式。 1.3 R包ggmotif的使用方法 激发我开发这个R包的原因是在许做基因家族分析中的motif分析的时候总是找不到趁手的工具去可视化相关的结果，要么是在线网站，要么是别人开发的工具，网页版工具怕哪天就跑路了，别人的工具想要个性化比较困难。那，就自己写一个吧。 R包下载安装： install.packages(&quot;ggmotif&quot;) # 或者 devtools::install_github(&quot;lixiang117423/ggmotif&quot;) meme输出的结果主要是XML格式和txt格式的文件，需要的结果就在这两个文件里面。 1.3.1 从XML文件提取结果并绘图 motif在序列上的位置结果存放在XML格式的文件中，运行下面的代码便可以将结果转换成数据框格式并进行可视化。 filepath &lt;- system.file(&quot;examples&quot;, &quot;meme.xml&quot;, package=&quot;ggmotif&quot;) motif_extract &lt;- getMotifFromXML(XMLfile = filepath) motif_plot &lt;- motif_location(data = motif_extract) motif_plot 1.3.2 从txt文件提取结果并进行可视化 每个motif的序列是存放在txt文件中的，运行下方的代码便能结果转换成数据框格式并进行绘图。 library(tidyverse) filepath &lt;- system.file(&quot;examples&quot;, &quot;meme.txt&quot;, package = &quot;ggmotif&quot;) motif_extract &lt;- getMotifFromTxt(data = filepath) motif_extract %&gt;% dplyr::filter(motif.num == &#39;Motif.1&#39;) %&gt;% dplyr::select(input.seq.motif) %&gt;% ggseqlogo::ggseqlogo() + theme_classic() 1.3.3 与ggtree联用 有时候会对序列构建进化树展示进化关系，ggmotif中的函数能够以输入的进化树文件为基础，把输出的motif在序列上的位置与进化树上的位置进行匹配，便能够与ggtree联用在一个图上展示进化树和motif在序列上的位置。 filepath &lt;- system.file(&quot;examples&quot;, &quot;meme.xml&quot;, package=&quot;ggmotif&quot;) treepath &lt;- system.file(&quot;examples&quot;, &quot;tree.nwk&quot;, package=&quot;ggmotif&quot;) motif_extract &lt;- getMotifFromXML(XMLfile = filepath) motif_plot_with_tree &lt;- motif_with_tree(data = motif_extract, tree = treepath) p.tree = ape::read.tree(treepath) %&gt;% ggtree::ggtree() + ggtree::geom_tiplab() p.tree %&gt;% aplot::insert_right(motif_plot_with_tree, width = 0.8) 1.4 ggplot2绘图相关 1.4.1 ggplot2绘制桑基(冲击图) library(ggforce) titanic &lt;- reshape2::melt(Titanic) # This is how we usually envision data for parallel sets #head(titanic) # Reshape for putting the first 4 columns as axes in the plot titanic &lt;- gather_set_data(titanic, 1:4) #head(titanic) # Do the plotting ggplot(titanic, aes(x, id = id, split = y, value = value)) + geom_parallel_sets(aes(fill = Sex), alpha = 0.3, axis.width = 0.1) + geom_parallel_sets_axes(axis.width = 0.2) + geom_parallel_sets_labels(colour = &#39;white&#39;,angle = 0, size = 6) + scale_y_continuous(expand = c(0,0)) + scale_fill_aaas() + theme_minimal() + theme(axis.text.y = element_blank(), axis.text.x = element_text(size = 12), axis.title = element_blank(), panel.background = element_blank(), panel.grid = element_blank()) 图1.4: ggplot2绘制桑基图示例 1.5 服务器搭建Rshiny-server #root 权限进入 sudo su useradd shiny # 添加shiny用户 passwd shiny # 修改shiny用户的密码 chmod +w /etc/sudoers # 修改权限 sudo vim /etc/sudoers # 编辑 # root ALL=(ALL) ALL 该行，在下面添加 shiny ALL=(ALL:ALL) ALL chmod -w /etc/sudoers # 收回权限 su - shiny # 切换到shiny用户 # 安装R sudo apt-get update sudo apt-get install r-base # 安装shiny包 sudo su -c &quot;R -e \\&quot;install.packages(&#39;shiny&#39;,repos=&#39;https://cran.rstudio.com/&#39;)\\&quot;&quot; # 安装shiny server sudo apt-get install gdebi-core wget https://download3.rstudio.org/ubuntu-14.04/x86_64/shiny-server-1.5.17.973-amd64.deb sudo gdebi shiny-server-1.5.17.973-amd64.deb 安装shiny-server的时候参考官方最新的指导页面，点击访问。 日志所在目录为：/var/log/shiny-server。需要修改配置文件，保证记录运行日志，否则可能找不到报错提示。 vi /etc/shiny-server/shiny-server.conf preserve_logs true; # 在最上面添加这行 软件所在目录为：/srv/shiny-server 安装完成后在浏览器输入IP:3838就能访问到示例界面了。默认的端口是3838端口，需要其他端口的需要自行调整。 基本管理： ## 重启 sudo systemctl restart shiny-server ##查看状态 sudo systemctl status shiny-server ##开启 sudo systemctl start shiny-server ##停止 sudo systemctl stop shiny-server 1.6 Ubuntu安装devtools sudo apt-get install -y libxml2-dev libcurl4-openssl-dev libssl-devv 最重要的是上面这一步，剩下的差啥装啥就OK。 安装proj这个包： sudo apt-get install libproj-dev install.packages(&quot;RcppEigen&quot;, INSTALL_opts = &#39;--no-lock&#39;) 1.7 R shiny开发 1.7.1 CSS学习网站 CSS菜鸟教程。 CSS在Rshiny中的使用。 "],["python.html", "Chapter2 Python知识汇总 2.1 本章前言 2.2 fasta文件处理", " Chapter2 Python知识汇总 2.1 本章前言 本章主要是关于Python的相关知识，包括Python基础知识、数据统计分析、数据可视化及人工只能等内容。 2.2 fasta文件处理 2.2.1 处理从PlantTFDB下载的序列 import os os.chdir(&quot;C://Users//Administrator//Desktop//&quot;) #read txt method one wrky_seq = open(&#39;wrky_seq.fasta&#39;,&#39;w&#39;) wrky_info = open(&#39;wrky_info.txt&#39;,&#39;w&#39;) f = open(&quot;seq.fas&quot;,&#39;r&#39;) for line in f: if str.startswith(line,&quot;&gt;&quot;): seq_name = str.split(line, &#39;|&#39;)[0] #seq_name = str.split(seq_name,&#39;.&#39;)[0] seq_species = str.split(line, &#39;|&#39;)[1] seq_name2 = str.replace(seq_name, &quot;&gt;&quot;, &quot;&quot;) #print(seq_name) wrky_seq.write(seq_name + &quot;\\n&quot;) wrky_info.write(seq_name + &quot; &quot; + seq_name2 + &quot; &quot; + seq_species + &quot;\\n&quot;) else: wrky_seq.write(line) wrky_seq.close() wrky_info.close() "],["bioinf.html", "Chapter3 生物信息学 3.1 本章前言 3.2 常用的生物学数据库 3.3 WSL安装使用Docker 3.4 Conda的安装使用 3.5 git的使用 3.6 基因家族分析 3.7 FastTree构建进化树 3.8 处理PlantTFDB下载的fasta格式序列 3.9 软件安装 3.10 Ubuntu搭建生信环境", " Chapter3 生物信息学 3.1 本章前言 本章主要是关于生物信息学的相关知识。 3.2 常用的生物学数据库 3.2.1 CATH-Gene3D 这个数据库是蛋白质数据库，主要是蛋白结构域的进化关系。 点击访问。 3.3 WSL安装使用Docker 3.3.1 Docker的安装 参考的安装教程：Docker-从入门到实践。关键的代码如下： curl -fsSL test.docker.com -o get-docker.sh curl -fsSL get.docker.com -o get-docker.sh sudo sh get-docker.sh --mirror Aliyun sudo sh get-docker.sh --mirror AzureChinaCloud 3.3.2 Docker的使用 Docker默认是需要root用户才能使用的，在Windows上我习惯于进入Powershell后执行下面的命令启动Docker： wsl --shutdown # 先关闭wsl wsl # 启动WSL sudo su # 进入root sudo service docker start # 启动Docker su xiang # 切换会用户（非root权限） 3.3.3 如何从WSL1切换到WSL2 我在Windows上使用Docker遇到的一个很奇怪的问题是，我之前的版本是WSL1,Docker无论如何都无法使用，搜索半天也没有找到解决方法，索性将WSL1升级成WSL2，没想到问题就那样解决了。参考教程：知乎：WSL1 升级为WSL2。下面是升级的过程： 下载对应的内核更新包：点击下载 CMD中管理员身份运行代码： dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 设置版本 wsl --set-version Ubuntu-20.04 2 其中的Ubuntu-20.04是通过代码wsl -l -v查看到的。 然后再次重启WSL即可。 3.3.4 下载Docker镜像 在Docker Hub中检索下载需要的镜像。 3.3.5 Docker的使用 进入WSL后运行下方代码运行Docker： sudo service --status-all sudo service docker start sudo service docker start docker run -v /mnt/:/work -it omicsclass/rnaseq 其中的work是不一定的，需要看镜像给的路径是啥。 3.3.6 如何创建自己的镜像 先从Docker Hub下载Ubuntu的官方镜像，然后在镜像中安装需要的软件。 PS：如何加速pip的下载： pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple 加速的R包的下载安装： options(repos=structure(c(CRAN=&quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;))) options(BioC_mirror=&quot;https://mirrors.tuna.tsinghua.edu.cn/bioconductor&quot;) 在安装完成需要的软件后，先运行exit退出Docker，然后运行下面的代码生成新的镜像： docker commit -m &quot; add some softwares for RNA-Seq&quot; -a &quot;xiangli&quot; 21bfa810c811 lixiang117423/rnaseq:v1 然后登陆自己的Docker，登录以后把新的镜像推送到Docker Hub即可： docker push lixiang117423/rnaseq:v1 3.4 Conda的安装使用 3.4.1 下载安装 现在官方网站下载对应版本的.sh文件。然后一路默认安装即可。安装完成后激活用户目录下的.bashrc文件即可。 3.4.2 Conda安装R及R包 conda instll r-base conda instll r-ggplot2 conda install -c bioconda bioconductor-deseq2 3.4.3 安装其他软件 其他软件的安装直接去Conda Gallery上检索进行安装。 3.4.4 pip下载速度慢的解决方法： pip install django -i https://pypi.tuna.tsinghua.edu.cn/simple 3.5 git的使用 3.5.1 git同时管理GitHub与Gitee 1. 查看远程仓库地址 git remote -v 2. 重命名远程仓库 git remote rename origin github 3. 添加新的远程仓库 git remote add gitee https://gitee.com/gozhuyinglong/blog-demos.git 4. 多个远程仓库推拉 git push github main git pull github main git push gitee main git pull gitee main 5. 将本地分支与远程分支进行关联 git push --set-upstream gitee main 6. 直接推送不指定分支 git push github git pull github git push gitee git pull gitee 7. 移除远程仓库 git remote remove gitee 3.6 基因家族分析 基因家族分析是一种常见的生物信息学分析套路，也是生物信息学数据挖掘发表小文章常用的分析方法，和GEO挖掘等类似。基因家族的分析鉴定可以用pfam上的hmm文件进行基因家族的检索鉴定，也可以用blast的方法进行比对鉴定，通常是适用拟南芥对应的基因家族进行比对鉴定。 植物转录因子数据库，点击访问。 3.6.1 基因家族分析思路及文章撰写思路 基因家族分析是继GEO数据挖掘后，一种新的生物信息学挖掘策略。 如何做基因家族研究，可以参考这个帖子：http://www.planttech.com.cn/blog/58882464a46。 为什么我们要选择三七呢？ 首先三七参考基因组还不是很多，我们实验室有一个，今年杨生超副校长有一篇最新的，这些基因组数据为我们后续做三七基因家族研究提供了坚实的基础；其次，我们实验室以三七为主，有大量的三七资源，方便我们后续验证。 文章撰写的格式建议以Frontiers in Plant Science为模板，后续方便修改。 每个基因家族都有大量的综述，因为基因家族基本都是转录因子，转录因子基本都是有很好的综述的。 3.6.2 数据准备 需要准备的数据主要是参考基因组数据，包括fasta格式的序列文件、gff或gtf格式的基因组注释文件、蛋白质序列文件（通常是每个转录本的蛋白序列）、cDNA序列等文件。如果有转录组数据的话进行对应的转录组分析即可。除开上述这些文件外，还需要适用的文件还有.hmm格式的文件。 3.6.3 软件准备 只需要会使用Linux系统，会安装Docker即可，然后下载组学大讲堂的镜像即可。点击浏览镜像地址。Docker的安装适用方法参考3.3。 3.6.4 分析过程 mRNA_ID与基因ID的提取 由于一个基因会对应多个转录本，因此一个基因下会对应多个mRNA的编号。在后续的分析中，每个基因只需要选择一个转录本的编号进行分析即可，因为每个基因不同的转录本的序列差异是较小的。提取的代码： perl code/script/mRNAid_to_geneid.pl data/unzip_data/*.gff* results/step.1.get.mRNA.and.gene.ID/mRNA2geneID.txt perl code/script/geneid_to_mRNAid.pl data/unzip_data/*.gff* results/step.1.get.mRNA.and.gene.ID/geneID2mRNAid.txt 检索结构域 这一步主要是以.hmm文件为基础检索该物种蛋白序列中含有该结构域的序列。输入文件包括.hmm文件和蛋白文件，输出hmmsearch的检索结果。其中用于后续筛选的是evalue这个参数，部分文章以0.001为阈值。of那一列表示的是某个基因对应的这个结构域有几个。 hmmsearch --domtblout results/step.2.domain.search/hmm.txt --cut_tc data/unzip_data/*.hmm data/unzip_data/*.pep* 选择结构域 由于一个基因的单个转录本可能会比对到多个结构域，因此需要对比对到的结构域进行选择。默认选择的是第一个结构域。下面代码的最后一个参数是hmmsearch输出文件里面的E-value,如果需要全部的第一个结构域，将阈值设置为1即可。 perl code/script/domain_xulie.pl results/step.2.domain.search/hmm.txt data/unzip_data/*.pep* results/step.2.domain.search/domain.fa 1.2e-28 多序列比对 之所以要进行多序列比对，是因为下载的.hmm文件是来自很多物种的这个结构域组成的隐马尔科夫模型，进行多序列比对后将该物种检索到的结构域序列进行比对，再次构建该物种该基因家族的隐马尔科夫模型，会更加准确。 echo -e &#39;1\\nresults/step.2.domain.search/domain.fa\\n2\\n1\\nresults/step.2.domain.search/out.aln\\nr.domain.search/out.dnd\\nX\\n\\n\\nX\\n&#39; |clustalw 重构隐马尔科夫模型 hmmbuild results/step.2.domain.search/new.hmm results/step.2.domain.search/out.aln 重新进行检索 利用构建得到的新的隐马尔科夫模型重新进行检索结构域。 hmmsearch --domtblout results/step.2.domain.search/new.out.txt --cut_tc results/step.2.domain.search/new.hmm data/unzip_data/*.pep* 筛选输出结果 对重新检索后的结果进行筛选，也是对E-value进行筛选。 grep -v &quot;^#&quot; results/step.2.domain.search/new.out.txt|awk &#39;$7&lt;0.001 {print}&#39; &gt; results/step.2.domain.search/domain.new.out.selected.txt 去除重复的ID 上一步筛选得到的是该种中哪些基因是潜在的目标基因家族成员，而一个基因对应了多个mRNA，因此，只需要在筛选后的每个基因中选择一个具有代表性的mRNA进行后续的分析即可。这个提取唯一ID的步骤需要手动完成（PS：手动完成也很快）。手动挑选完mRNA的ID放在第一列，另存为文件uniqueID.txt。 perl code/script/select_redundant_mRNA.pl results/step.1.get.mRNA.and.gene.ID/mRNA2geneID.txt results/step.2.domain.search/domain.new.out.selected.txt results/step.2.domain.search/remove_redundant_IDlist.txt 提取蛋白序列 在得到基因ID后需要提取蛋白序列进行后续的分析。在SMART或者Pfam或NCBI CDD确认这些基因是真真正正含有该结构域，没有的基因要剔除！在SMART中没有检索到结构域的基因在gene.not.in.SMART.txt中；在Pfam中全都是WRKY结构域，对应文件为Pfam.results.txt。 perl code/script/get_fa_by_id.pl results/step.2.domain.search/uniqueID.txt data/unzip_data/*.pep* results/step .2.domain.search/pep.need.confirm.fa 计算蛋白质分子量等 perl code/script/stat_protein_fa.pl results/step.2.domain.search/pep.need.confirm.fa results/step.2.domain.search/pep.MW.txt 构建进化树 选择利用软件CLUSTALW进行多序列比对，然后利用MEGA构建进化树。CLUSTALW输出结果转换成.fasta格式的方法参考1.2。 Motif分析 meme results/step.3.seq.and.tree/pep_confirmed.fa -protein -oc results/step.4.motif/ -nostatus -time 18000 -maxsize 6000000 -mod anr -nmotifs 10 -minw 6 -maxw 100 基因结构分析 perl code/script/get_gene_exon_from_gff.pl -in1 results/step.2.domain.search/uniqueID.txt -in2 data/unzip_data/*.gff* -out results/step.5.gene.structure/gene_exon_info.gff 基因在染色体上的定位 samtools faidx data/unzip_data/*.dna* cp data/unzip_data/*.fai results/step.5.gene.structure/ perl code/script/get_gene_weizhi.pl -in1 results/step.2.domain.search/uniqueID.txt -in2 data/unzip_data/*.gff* -out results/step.5.gene.structure/mrna_location.txt 顺式作用元件分析 脚本默认的启动子长度是1500bp。将提取得到的启动子序列上传到Plane CARE进行分析。 perl code/script/get_promoter.pl data/unzip_data/*dna.top* results/step.5.gene.structure/mrna_location.txt results/step.6.cis.acting.element/promoter.txt 基因家族成员的亚细胞定位分析 两个网站：WolfPsort和Cello。 3.7 FastTree构建进化树 FastTree是基于最大似然法构建进化树的软件，使用简单。Windows端直接下载，完后运行即可： .\\FastTree.exe .\\YourAlignResults.fasta 前面是软件名称，后面是比对好的序列文件。 3.8 处理PlantTFDB下载的fasta格式序列 3.8.1 将序列ID和物种信息进行提取 import os os.chdir(&quot;C://Users//Administrator//Desktop//&quot;) #read txt method one wrky_seq = open(&#39;wrky_seq.fasta&#39;,&#39;w&#39;) wrky_info = open(&#39;wrky_info.txt&#39;,&#39;w&#39;) f = open(&quot;seq.fas&quot;,&#39;r&#39;) for line in f: if str.startswith(line,&quot;&gt;&quot;): seq_name = str.split(line, &#39;|&#39;)[0] #seq_name = str.split(seq_name,&#39;.&#39;)[0] seq_species = str.split(line, &#39;|&#39;)[1] seq_name2 = str.replace(seq_name, &quot;&gt;&quot;, &quot;&quot;) #print(seq_name) wrky_seq.write(seq_name + &quot;\\n&quot;) wrky_info.write(seq_name + &quot; &quot; + seq_name2 + &quot; &quot; + seq_species + &quot;\\n&quot;) else: wrky_seq.write(line) wrky_seq.close() wrky_info.close() 3.8.2 将fasta格式的序列转换成data.frame格式 rm(list = ls()) df.info &lt;- fread(&quot;wrky_info.txt&quot;, header = FALSE) table(df.info$V3) %&gt;% as.data.frame() -&gt; species # write.csv(species, file = &#39;物种数量统计.csv&#39;, row.names = FALSE, quote = FALSE) # 整理蛋白数据格式 df.seq &lt;- fread(&quot;seq.fas&quot;, header = FALSE) %&gt;% na.omit() seq.num &lt;- c() for (i in 1:nrow(df.seq)) { if (str_sub(df.seq$V1[i], 1, 1) == &quot;&gt;&quot;) { seq.num &lt;- c(seq.num, i) } } df.temp &lt;- seq.num %&gt;% as.data.frame() colnames(df.temp)[1] &lt;- &quot;v1&quot; df.temp &lt;- df.temp %&gt;% dplyr::mutate( start = v1 + 1, end = v1 - 1 ) seq.info &lt;- df.seq[df.temp$v1, ] %&gt;% dplyr::mutate(seq = &quot;&quot;) for (i in 1:nrow(df.temp)) { start &lt;- df.temp$start[i] if (i == nrow(df.temp)) { end &lt;- nrow(df.seq) } else { end &lt;- df.temp$end[i + 1] } seq.temp &lt;- &quot;&quot; for (j in start:end) { seq.temp &lt;- paste0(seq.temp, df.seq$V1[j]) } seq.info$seq[i] &lt;- seq.temp } selected.species.info &lt;- NULL set.seed(117423) species.random &lt;- sample(unique(df.info$V4), 30, replace = FALSE) for (i in species.random) { df.info.sub &lt;- df.info %&gt;% dplyr::filter(V4 == i) if (nrow(df.info.sub) &lt; 10) { selected.species.info &lt;- rbind(selected.species.info, df.info.sub) } else { sample.num &lt;- sample(nrow(df.info.sub), 10, replace = FALSE) selected.species.info &lt;- rbind(selected.species.info, df.info.sub[sample.num, ]) } } fwrite(selected.species.info, file = &quot;随机选择的30个物种信息.txt&quot;, quote = FALSE, row.names = FALSE, col.names = FALSE) if (FALSE) { species &lt;- c( &quot;Arabidopsis_thaliana&quot;, #&#39; Nicotiana_tabacum&#39;, #&#39; Oryza_sativa_subsp._indica&#39;, &quot;Oryza_sativa_subsp._japonica&quot;, &quot;Zea_mays&quot; #&#39; Glycine_max&#39;, #&#39; Solanum_tuberosum&#39;, #&#39; Triticum_aestivum&#39; ) } df.all &lt;- merge(seq.info, selected.species.info, by = &quot;V1&quot;, all.y = TRUE) # filter # df.selected = seq.info %&gt;% dplyr::filter(V1 %in% selected.species.info$V1) df.selected &lt;- df.all seq.selected &lt;- NULL for (i in 1:nrow(df.selected)) { seq.selected &lt;- seq.selected %&gt;% rbind(data.frame(temp = df.selected$V2[i])) %&gt;% rbind(data.frame(temp = df.selected$seq[i])) } fwrite(seq.selected, file = &quot;选中的序列.fas&quot;, row.names = FALSE, quote = FALSE, col.names = FALSE) 3.9 软件安装 3.9.1 Aspera wget https://ak-delivery04-mul.dhe.ibm.com/sar/CMA/OSA/09cne/0/ibm-aspera-connect-3.11.0.5-linux-g2.12-64.tar.gz tar -zxvf ibm-aspera-connect-3.11.0.5-linux-g2.12-64.tar.gz ./ibm-aspera-connect-3.11.0.5-linux-g2.12-64.sh echo &quot;&quot;&quot;export PATH=\\&quot;/home/xiang/.aspera/connect/bin:\\$PATH\\&quot; &quot;&quot;&quot; &gt;&gt; ~/.bashrc source ~/.bashrc ascp -h ascp-i /mnt/c/Users/Administrator/Desktop/aspera.openssh -QT -l100m -k1 d /mnt/h/BaiduNetdiskDownload/*.gz subasp@upload.ncbi.nlm.nih.gov:uploads/luolifenllf_126.com_tCdfcqJq/20210816upload ascp -i aspera.openssh -QT -l1000m -k1 -d A2.R2.fastq.gz subasp@upload.ncbi.nlm.nih.gov:uploads/luolifenllf_126.com_tCdfcqJq/20210816upload 3.10 Ubuntu搭建生信环境 下面的代码来自王通老师。 3.10.1 旧版本 #下载ubuntu 20.04镜像 https://ftp.sjtu.edu.cn/ubuntu-cd/20.04.1/ubuntu-20.04.1-desktop-amd64.iso #制作USB启动盘 #下载使用rufus https://rufus.ie/ #或者ultraISO https://cn.ultraiso.net/ #挂载磁盘 #假设未挂载磁盘为/dev/sdb fdisk -l parted /dev/sdb #交互界面 mklabel gpt quit #格式化磁盘 mkfs.xfs -f /dev/sdb #挂载磁盘 mkdir /ifs1 mount /dev/sdb /ifs1 #修改fstab echo &quot;/dev/sdb /ifs1 xfs defaults,uquota 0 0&quot; &gt;&gt;/etc/fstab #创建root账户 sudo passwd root 输入当前用户密码： 输入root密码： 再次输入root密码： #以下操作使用root账户完成 su - #修改源 cp /etc/apt/sources.list /etc/apt/sources.list.bak sed -i &#39;s#cn.archive.ubuntu.com#mirrors.aliyun.com#g&#39; /etc/apt/sources.list sudo apt-get update &amp;&amp; sudo apt-get upgrade #ssh登录 apt install openssh-server ps -e | grep ssh #检查ssh server是否启动 sudo /etc/init.d/ssh start #启动 #安装java apt-get install openjdk-8-jdk sudo add-apt-repository ppa:webupd8team/java apt update apt install -y oracle-java8-installer apt install -y zlib1g zlib1g.dev apt install -y libboost-dev #安装R以及Rstudio apt install -y r-base https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb dpkg -i rstudio-1.3.1093-amd64.deb #安装一些小工具 apt install -y git vim tree creen htop cmake lftp lrzsz #apt安装生物软件 apt install -y bwa apt install -y samtools apt install -y bcftools apt install -y blast2 apt install -y bedtools apt install -y seqtk apt install -y minimap2 apt install -y bowtie2 apt install -y phylip apt install -y clustalx apt install -y canu apt install -y kraken2 apt install -y hisat2 apt install -y stringtie apt install -y jellyfish apt install -y circos apt install -y nanopolish apt install -y nanook apt install -y centrifuge apt install -y rna-star apt install -y freebayes apt install -y cnvkit apt install -y spades apt install -y mothur apt install -y muscle apt install -y mafft apt install -y iqtree apt install -y sniffles apt install -y last-align apt install -y augustus apt install -y bamtools apt install -y bedops apt install -y delly #安装浏览器 apt-get install -y chromium-browser #安装微信 wget https://www.ubuntukylin.com/public/pdf/wine-wechat_1.0-windows2.8.6_all.deb #Debian 系的操作系统可以执行这样的命令： sudo dpkg --add-architecture i386 sudo apt update #安装 wine 应用所需的依赖，也就是 wine： sudo apt install wine-stable #使用 dpkg 安装 wine 应用： sudo dpkg -i wine-wechat_1.0-windows2.8.6_all.deb #安装bioconda wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh sh Miniconda3-latest-Linux-x86_64.sh source ~/.bashrc #添加软件源 conda config --add channels bioconda conda config --add channels conda-forge 3.10.2 新版本 ############################# # 获得Linux环境 # ############################# #下载ubuntu 20.04镜像 https://ftp.sjtu.edu.cn/ubuntu-cd/20.04.1/ubuntu-20.04.1-desktop-amd64.iso #制作USB启动盘 #下载使用rufus https://rufus.ie/ #或者ultraISO https://cn.ultraiso.net/ #挂载磁盘 #假设未挂载磁盘为/dev/sdb fdisk -l parted /dev/sdb #交互界面 mklabel gpt quit #格式化磁盘 mkfs.xfs -f /dev/sdb #挂载磁盘 mkdir /ifs1 mount /dev/sdb /ifs1 #修改fstab echo &quot;/dev/sdb /ifs1 xfs defaults,uquota 0 0&quot; &gt;&gt;/etc/fstab #如果不安装系统，购买腾讯云服务器一年74元，2核心4G版本即可 https://curl.qcloud.com/gm6m0QoY ############################# # 基本配置 # ############################# #创建root账户 sudo passwd root 输入当前用户密码： 输入root密码： 再次输入root密码： #以下操作使用root账户完成 su - #修改源 cp /etc/apt/sources.list /etc/apt/sources.list.bak sed -i &#39;s#cn.archive.ubuntu.com#mirrors.aliyun.com#g&#39; /etc/apt/sources.list sudo apt-get update &amp;&amp; sudo apt-get upgrade #ssh登录 apt install openssh-server ps -e | grep ssh #检查ssh server是否启动 sudo /etc/init.d/ssh start #启动 #安装java apt-get install openjdk-8-jdk sudo add-apt-repository ppa:webupd8team/java apt update apt install -y oracle-java8-installer apt install -y zlib1g zlib1g.dev apt install -y libboost-dev ############################# # 安装R以及Rstudio # ############################# apt install -y r-base https://download1.rstudio.org/desktop/bionic/amd64/rstudio-1.3.1093-amd64.deb dpkg -i rstudio-1.3.1093-amd64.deb #安装一些小工具 apt install -y git vim tree creen htop cmake lftp lrzsz #apt安装生物软件 apt install -y bwa apt install -y samtools apt install -y bcftools apt install -y blast2 apt install -y bedtools apt install -y seqtk apt install -y minimap2 apt install -y bowtie2 apt install -y phylip apt install -y clustalx apt install -y canu apt install -y kraken2 apt install -y hisat2 apt install -y stringtie apt install -y jellyfish apt install -y circos apt install -y nanopolish apt install -y nanook apt install -y centrifuge apt install -y rna-star apt install -y freebayes apt install -y cnvkit apt install -y spades apt install -y mothur apt install -y muscle apt install -y mafft apt install -y iqtree apt install -y sniffles apt install -y last-align apt install -y augustus apt install -y bamtools apt install -y bedops apt install -y delly #安装浏览器 apt-get install -y chromium-browser #安装微信 wget https://www.ubuntukylin.com/public/pdf/wine-wechat_1.0-windows2.8.6_all.deb #Debian 系的操作系统可以执行这样的命令： sudo dpkg --add-architecture i386 sudo apt update #安装 wine 应用所需的依赖，也就是 wine： sudo apt install wine-stable #使用 dpkg 安装 wine 应用： sudo dpkg -i wine-wechat_1.0-windows2.8.6_all.deb ############################# # 安装bioconda # ############################# wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh sh Miniconda3-latest-Linux-x86_64.sh source ~/.bashrc #添加软件源 conda config --add channels bioconda conda config --add channels conda-forge ############################# # 使用bioconda安装常用软件 # ############################# #安装mamba conda install -c conda-forge -y mamba #利用mamba安装软件 mamba install -y bwa mamba install -y samtools mamba install -y bcftools mamba install -y blast mamba install -y blat mamba install -y mummer mamba install -y mafft mamba install -y muscle mamba install -y lastz mamba install -y sra-tools mamba install -y seqkit mamba install -y seqtk mamba install -y bedtools mamba install -y bedops mamba install -y gfatools mamba install -y circos mamba install -y entrez-direct mamba install -y emboss #安装数据质控软件 mamba install -y fastqc multiqc mamba install -y trimmomatic mamba install -y fastp #安装基因组拼接相关工具 mamba install -y velvet mamba install -y flye mamba install -y miniasm mamba install -y canu mamba install -y megahit mamba install -y spades mamba install -y quast mamba install -y racon mamba install -y miniasm mamba install -y nanopolish #安装基因功能分析软件 mamba install -y prodigal mamba install -y glimmer mamba install -y augustus mamba install -y trf ############################# # 使用虚拟环境 # ############################# #1 创建python 2.7环境 conda create -n py27 -y python=2.7 #查看现有虚拟环境 conda env list #激活python2.7环境 conda activate py27 #查看python版本 python -V #2 安装nanoplot conda create -n nanoplot -y nanoplot #3 bioconda管理R及R包 mamba install -y r-base=4.1.1 mamba install -y bioconductor-deseq2 mamba install -y bioconductor-rnaseqgene mamba install -y bioconductor-clusterProfiler "],["literature.html", "Chapter4 嗑盐文献 4.1 本章前言 4.2 何祖华2021Cell文章", " Chapter4 嗑盐文献 4.1 本章前言 本章主要与文献阅读相关。 4.2 何祖华2021Cell文章 这是一篇让人读完以后叹为观止的文章(Gao et al. 2021)，精彩，实在是精彩！ 故事是这样开始的，在TP309（粳稻）育种群体中，发现一个很特殊的变种，这个变种携带了一个叫做rod1的基因，这个基因有什么特别的地方呢？通过田间试验和室内试验发现，携带了rod1基因的植株对水稻纹枯病、水稻稻瘟病和水稻白叶枯病这三种严重影响水稻生产的病害都具有广谱抗性（下图ABC）；而且，其植株体内的SA和JA的含量也比TP309的高很多（下图D）。 为了验证rod1的广谱抗性，利用常规的RNA-Seq对TP309和携带rod1的植株进行转录组测序，测序的结果可以说是非常明显了，但从热图上看是完全分开的（下图E），然后呢对这些差异基因进行GO富集分析，发现有几个很特殊的GO term在rod1里面没有，这几个通路分别是内肽酶、钙结合及DNA结合（下图F紫色的字）。rod1中显著富集到的GO term有离子结合、氧化酶等。于是，作者他们认为rod1中Ca\\(^{2+}\\)与ROS两者之间存在某种关系，导致其免疫上调。然后在田间观察TP309和rod1对水稻产量的影响，发现在自然田间条件下的话，rod1植株的单株产量远低于TP309的；但是在天然的稻瘟病苗圃中，rod1的单株产量远高于TP309。这个结果能说明啥呢？这个结果说明如果有病害侵染的话，rod1植株会表现得更好，也就是产量更高。 下一步要做的，肯定是把这个基因克隆出来，只有克隆出来，才能做进一步的深入研究。利用图位克隆技术在水稻的6号染色体附近大概53kb的一个区域定位到该基因（下图A），命名为ROD1；进一步比较了水稻参考基因组水稻品种Nippionbare、TP309及rod1在该区域的序列差异，发现rod1存在一个核苷酸的缺失，也就是TP309里面的是ATGGG，在rod1里面是AT-GG，中间少了个G（下图B）。为了确定他们鉴定的这个基因，利用遗传互补（也就是利用野生型基因补偿突变型基因使其恢复正常的表型）确认了该基因的功能（下图C）。 这个基因的蛋白长度大概是225个氨基酸长度，并且含有一个C2结构域（蛋白质激酶C保守结构域2，承担信号转导和细胞膜转运功能），这个结构域上还含有4个天冬氨酸残基（下图A）。然后利用玉米泛素启动子将ROD1过表达，过表达以后呢制作对水稻上的三种病害的抗性都降低了（下图DEFGH）。这个结果说明ROD1是水稻免疫抑制子，也就是它越表达，水稻的抗性越低。 不同的基因在植株体内表达的位点是不一样的，有的基因在根系表达多，有的基因在叶片中表达更旺盛。那ROD1主要是水稻植株的那个部位表达呢？通过原位杂交（In situ hybridization），发现ROD1 主要是在叶片上进行表达（下图B），而叶片更好是更多病原菌侵染的部位。而且在水稻植株被水稻白叶枯病菌侵染后，ROD1 的表达会被诱导上调（下图C）。rod1在田间生长的时候穗子比TP309短，穗子上的分支也更少（下图K），但是在过表达ROD1 后，穗子更长，产量也更高（下图KL）。这个结果表明ROD1在水稻的抗性和生长适应性两方面具有不同的作用。也就是rod1的抗性高，但是产量低；ROD1 的抗性低，但是产量高。这也符合植物生长-免疫平衡的基本原则。 再下一步是探究ROD1的同系物的分布情况，在开花植物中都有其同系物的存在，但是在苔藓等低等植物中没有其同系物的踪迹（下图AB）。这个结果表明ROD1这一类C2结构域蛋白出现在植物进化的较晚期。ROD1类蛋白在单子叶作物中有着极高的序列保守性，但是在拟南芥等十字花科的植物中却有着较高的多样性（下图B）。要是我分析，肯定是到这里就结束了，但是作者团队在这个地方提出的问题是“ROD1类蛋白在谷物类作物的免疫过程中是否有保守作用呢？”。于是呢，就用CRISPR/Cas9技术在玉米上搞了个突变体，结果发现突变体中PR基因的表达量更高，而且突变体对R.solani 的抗性更强（下图CDE）。这个结果加上前面的结果表明ROD1及其同系物在谷物中是一类特别的感病基因，在谷物免疫的过程中扮演者保守的功能。 前面提到ROD1蛋白结构含有1个C2结构域，那这个有什么用呢？C2结构域通常是Ca\\(^{2+}\\)感受器，这类结构域依赖Ca\\(^{2+}\\)与磷脂结合，从而将蛋白质靶向到特定的膜区域。那ROD1这个蛋白到底能不能和Ca\\(^{2+}\\)结合呢？能不能结合那肯定是要有个参照，怎么获得有效的参照呢？对这个蛋白的4个氨基酸残基进（因为C2结构域的氨基酸残基影响其和Ca\\(^{2+}\\)的结合）行突变，有单突变、双重突变、三重突变及四重突变（下图C）。利用微量热泳动方法来探究ROD1这个蛋白和Ca\\(^{2+}\\)的结合特性（下图D），图中的KD值的大小表示的是分子间的亲和性，越亲和的，其KD值越小。没有突变的ROD1和Ca\\(^{2+}\\)的KD值很小，而单位点突变和四重突变的KD值都很大，整整大了3个数量级。Ca\\(^{2+}\\)能够改变C2结构域的电位，使得C2结构与能够与磷脂进行结合。那下一步就是探究ROD1与不同脂质结合的能力与特异性（下图A）。从图中可以看到的是，ROD和PI(3,5)P2、PI(4)P及PI(5)P结合较好，但是Ca\\(^{2+}\\)螯合剂EGTA存在的时候，ROD1就不能与这些脂质进行结合。也就是说当没有Ca\\(^{2+}\\)的时候，ROD1是不能与磷脂进行结合的。 ROD1这个蛋白在哪里发挥功能呢？这也就需要对其进行定位。通过定位发现这个蛋白位于质膜周围的细胞外围空间（下图B）。但是将其4个氨基酸残基进行突变后都不同程度地出现了蛋白的降解（下图DE\\(_上\\)）。用flg22处理后，ROD1在质膜上的积累量更多（下图EF），这说明免疫激活促进了ROD1在质膜上的分布。 除了利用突变体看突变氨基酸残基后蛋白的定位，还检测突变不同的氨基酸位点后其抗性的变化，也就是过表达这些基因，不同程度的突变都导致对应植株的抗性降低，对三种病害的响应出奇一致（下图FGH）。不同位点的突变对植株的构型也有一定的影响（下图I）。 上述这些结果表明ROD1和Ca\\(^{2+}\\)结合后，进一步与磷脂结合，最后在质膜上“定居”。其实在这个部分已经能够看出，要是没有Ca\\(^{2+}\\)，那ROD1就“手足无措”了。 有了材料，有了表型，克隆到了基因，纯化到了蛋白，也知道这个基因能够影响植株的免疫，那下一步就是探究其免疫的机制。利用的方法是酵母双杂（Y2H）。首先是 以水稻稻瘟病互作的叶片建立一个cDNA文库，然后以ROD1为“鱼饵”去钓这个文库中与ROD1互作的蛋白。成功得到两个RING E3泛素连接酶，分别是RIP1和APIP6（下图）。进行更多试验后发现ROD1被RIP1和APIP6这两个蛋白泛素化（泛素化就是某个蛋白被加上一段标签，被加上标签的蛋白会被其他的细胞器所识别，大多被泛素化的蛋白的最终命运是降解）。 为了进一步验证RIP1和APIP6的功能，分别构建了敲除系和过表达系。果然不出意外，敲除系的植株的抗性都降低了，而过表达系植株的抗性都提高了。怎么理解呢？将这两个蛋白敲除后，ROD1就不能被泛素化，那它就不会降解，表达量较高，因此植株的抗性被抑制；将这两个蛋白过表达后，含量增加，ROD1被“疯狂”泛素化，也就是被疯狂降解，那植株的免疫就不会受到抑制，从而表现出较强的抗性。 除了RIP1和APIP6以外，酵母双杂还找到一个和ROD1互作的过氧化氢酶CatB。通过分裂荧光素酶互补试验和coIP发现ROD1和CatB是能够互作的（下图左AB）。过氧化氢酶能够清除ROS从而降低寄主的免疫水平。用CRISPR/Cas9将CatB敲除后，水稻植株体内PR基因的表达上调，植株对病害的抗性增强（下图右ABCD）。这说明CatB负向调控水稻对病害的免疫响应。 那ROD1和CatB是如何互作的呢？先用不同浓度的ROD1和CatB共同清除活性氧，可以发现的随着ROD1浓度的提高，CatB的活性增强，也就是说ROD1浓度越高，那CatB清楚的活性氧也就越多（下图C）；但是将基因ROD1进行突变后，蛋白ROD1介导的CatB清除活性氧的能力没有变化（下图D），也就是ROD1只有和Ca\\(^{2+}\\)结合后才能正常和CatB互作，从而清除ROS。怎么理解呢？前面说到，如果突变ROD1C1结构域上的4个氨基酸残基，那ROD1和Ca\\(^{2+}\\)结合的能力就降低了，没有Ca\\(^{2+}\\)结合，ROD1就不能正常介导CatB对ROS的清除。进一步提取活体植株体内的ROD1，发现TP309中CatB的活性都更搞（下图EF）。与之对应的是，TP309植株中H\\(_2\\)O\\(_2\\)的含量更低（下图GHI）。这些结果说明了啥呢？说明ROD1是通过介导ROS的清除来影响植株的免疫的。CatB这个蛋白主要定位在过氧化物酶体上，但是呢在质膜上也检测到了CatB的存在，当有ROD1存在的时候CatB在质膜上积累的量更多（下图JL），这样就说明了ROD1促进CatB在质膜上的定位。进一步利用本氏烟验证发现CatB能够在一定程度上清除由MLA10介导的过敏反应，当ROD1和CatB共同作用的时候这种过敏反应几乎完全消失了。上面这些结果表明ROD1首先将CatB募集到质膜能赶上，然后再激发CatB去清除活性氧。 找到这样一个基因，做完上述这些研究，其实已经很完美了。作者他们进一步探究这个基因在水稻群体中的变异情况。通过群体遗传分析发现ROD1这个位点上的核苷酸多态性很低，也就意味着这个位点在进化过程中发生了选择扫描事件（下图左A）。在约3000个水稻品种中，只有indica 这个亚种的Tajima’s D值是负值，也就意味着在indica 这个亚种中ROD1经历了不同的选择作用（下图B）。在这个基因的编码区发现了两个SNP，分别是SNP1\\(^{A/C}\\)和SNP2\\(^{G/C}\\)。第一个SNP是一个非同义的突变，在这个位点上脯氨酸变成了苏氨酸；第二个SNP是一个同义突变，编码的氨基酸没有发生改变。基于这两种SNP分类，可以将其分为三种单倍型（下图右A）。 随机选了178个含有这三种单倍型的水稻品种，调查其在田间对纹枯病的抗性（因为纹枯病还没有主效抗病基因），发现含有SNP1\\(^{A/C}\\)的水稻品种对纹枯病的抗性更强（下图D）。将这两种SNP导入到rod1中后发现SNP1\\(^{C}\\)的抗性基本和TP309持平，SNP1\\(^{A}\\)植株的抗性比rod1的弱一些（下图F），这个结果再次表明SNP1\\(^{A/C}\\)确实影响植株的基础免疫。为了进一步验证SNP1\\(^{A}\\)和SNP1\\(^{C}\\)的功能差异，他们构建了染色体片段替换系，发现携带SNP1\\(^{C}\\)的植株的抗性更弱（下图G），也就意味着携带SNP1\\(^{A}\\)的抗性更强，但是在产量上是没有差异的。进一步探究发现这两种单倍型对CatB的影响也不一样，SNP1\\(^{C}\\)对CatB的影响更大，也就意味着ROD1上单核苷酸的变异影响其与CatB的互作。为了探明SNP1\\(^{A/C}\\)的进化差异，比较了44个野生稻中ROD1的序列差异，发现只有4个野生稻携带了SNP1\\(^{C}\\)，剩下的40个都携带的是SNP1\\(^{C}\\)。SNP1\\(^{A}\\)主要存在于籼稻中，而SNP1\\(^{C}\\)主要存在于野生稻和粳稻中，而籼稻主要分布在热带和亚热带，而粳稻主要分布在温带，也就是说SNP1\\(^{C}\\)和SNP1\\(^{C}\\)的分布是有明显的分布差异的（下图H）。总之，这些结果表明ROD1等位基因的变化导致其清除ROS的能力有差异，也就导致了品种特异性的抗性差异。 之前鉴定到的与ROD1互作的蛋白APIP6有报道它能够和稻瘟病菌的效应子AvrPiz-t互作并将其降解，RIP1和APIP6高度相似，那RIP1能不能与AvrPiz-t互作呢？通过一波试验发现这两个蛋白确实能够互作。也就是说ROD1与AvrPiz-t都与RIP1和APIP6互作，而且ROD1和AvrPiz-t都能抑制寄主免疫，那AvrPiz-t抑制寄主免疫的机制是不是和ROD1一样呢？一波试验过后发现AvrPiz-t和ROD1一样，与同样的E3泛素连接酶互作，参与同样的降解通路，同样促进了过氧化物酶介导的ROS清除来抑制寄主植物的免疫。利用ROD1的启动子在rod1中过表达AvrPiz-t，发现过表达后，rod1原先的抗性基本全部丧失（下图BC）。然后呢利用两个不同的水稻品种ZH11和TP309进行进一步验证，其中ZH11含有AvrPiz-t的抗性基因，而TP309没有这个对应的基因，两个水稻品种都接种稻瘟病菌TH12（没有效应子AvrPiz-t）。发现ROD1能够在一定程度上恢复TH12的致病力（下图D）。再比较ROD1和AvrPiz-t的蛋白结构后发现这两个蛋白的结构极其相似，也就意味着它们有着一样的的免疫抑制机制。 References "],["article.html", "Chapter5 嗑盐文章 5.1 本章前言", " Chapter5 嗑盐文章 5.1 本章前言 本章主要与科研相关，包括但不限于文献阅读、科研绘图、实验方法等。 "],["上课笔记.html", "Chapter6 上课笔记 6.1 本章前言 6.2 李成云：现代植物病理学", " Chapter6 上课笔记 6.1 本章前言 6.2 李成云：现代植物病理学 6.2.1 20211022 韩斌野生稻文章 国际水稻所最新的3K文章（未发表） TIR-NBS-LRR在水稻中没有，但是CC-NBS-LRR在水稻中很多 DOI：10.1007/s00122-004-1758-x水稻上的R基因的分布 基因资源库 水稻白叶枯病菌释放的效应子可以进入到细胞核，与寄主蛋白进行互作 Pita的三篇文章可以参考 Pigm, Pi1、5、9这些抗性基因只在籼型水稻中存在 长期的协同进化过程中，寄主和病原共有的基因！！！ "],["other.html", "Chapter7 Other 7.1 本章前言", " Chapter7 Other 7.1 本章前言 本章主要是关于软件安装使用等其他教程。 "],["references.html", "References", " References "]]
